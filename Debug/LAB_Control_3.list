
LAB_Control_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006220  08006220  00016220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006438  08006438  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006440  08006440  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000018  08006460  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08006460  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d265  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1f  00000000  00000000  0002d2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016359  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc2c  00000000  00000000  00046791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e570  00000000  00000000  000533bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e192d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  000e1980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006204 	.word	0x08006204

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08006204 	.word	0x08006204

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <newmat>:
  int row;
  int col;
  float entries[3][3];
}Mat;

Mat newmat(int r,int c,float data[9]){
 8000e78:	b4b0      	push	{r4, r5, r7}
 8000e7a:	b093      	sub	sp, #76	; 0x4c
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
  Mat M;
  M.row = r;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	613b      	str	r3, [r7, #16]
  M.col = c;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	617b      	str	r3, [r7, #20]
  int count = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	647b      	str	r3, [r7, #68]	; 0x44
  for(int i=0 ; i<r; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	643b      	str	r3, [r7, #64]	; 0x40
 8000e96:	e020      	b.n	8000eda <newmat+0x62>
  {
    for(int j=0; j<c; j++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e9c:	e016      	b.n	8000ecc <newmat+0x54>
    {
      M.entries[i][j] = data[count];
 8000e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	3348      	adds	r3, #72	; 0x48
 8000eba:	443b      	add	r3, r7
 8000ebc:	3b38      	subs	r3, #56	; 0x38
 8000ebe:	6019      	str	r1, [r3, #0]
      count++;
 8000ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
    for(int j=0; j<c; j++)
 8000ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec8:	3301      	adds	r3, #1
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbe4      	blt.n	8000e9e <newmat+0x26>
  for(int i=0 ; i<r; i++)
 8000ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8000eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbda      	blt.n	8000e98 <newmat+0x20>
    }
  }
  return M;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	f107 0410 	add.w	r4, r7, #16
 8000eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ef6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	374c      	adds	r7, #76	; 0x4c
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bcb0      	pop	{r4, r5, r7}
 8000f02:	4770      	bx	lr

08000f04 <sum>:

void set(Mat M,int r,int c,float d){
  M.entries[r][c]=d;
}

Mat sum(Mat A,Mat B){
 8000f04:	b084      	sub	sp, #16
 8000f06:	b5b0      	push	{r4, r5, r7, lr}
 8000f08:	b0a4      	sub	sp, #144	; 0x90
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6378      	str	r0, [r7, #52]	; 0x34
 8000f0e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  Mat M;
  M.row = A.row;
 8000f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  M.col = A.col;
 8000f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
  float dataM[9] = {0};
 8000f22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f26:	2224      	movs	r2, #36	; 0x24
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 f916 	bl	800515c <memset>
  M = newmat(A.row, A.col, dataM);
 8000f30:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000f34:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000f38:	4638      	mov	r0, r7
 8000f3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3e:	f7ff ff9b 	bl	8000e78 <newmat>
 8000f42:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000f46:	463d      	mov	r5, r7
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(int i = 0; i < A.row; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f5e:	e042      	b.n	8000fe6 <sum+0xe2>
  {
    for(int j = 0; j< A.col; j++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000f66:	e033      	b.n	8000fd0 <sum+0xcc>
    {
      M.entries[i][j] = A.entries[i][j] + B.entries[i][j];
 8000f68:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000f76:	4413      	add	r3, r2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	33a0      	adds	r3, #160	; 0xa0
 8000f7e:	443b      	add	r3, r7
 8000f80:	3304      	adds	r3, #4
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000f94:	4413      	add	r3, r2
 8000f96:	3302      	adds	r3, #2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	33a0      	adds	r3, #160	; 0xa0
 8000f9c:	443b      	add	r3, r7
 8000f9e:	3330      	adds	r3, #48	; 0x30
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3390      	adds	r3, #144	; 0x90
 8000fbe:	443b      	add	r3, r7
 8000fc0:	3b34      	subs	r3, #52	; 0x34
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j< A.col; j++)
 8000fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fd4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbc5      	blt.n	8000f68 <sum+0x64>
  for(int i = 0; i < A.row; i++)
 8000fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbb6      	blt.n	8000f60 <sum+0x5c>
    }
  }
  return M;
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001002:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001006:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800100a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800100c:	3790      	adds	r7, #144	; 0x90
 800100e:	46bd      	mov	sp, r7
 8001010:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001014:	b004      	add	sp, #16
 8001016:	4770      	bx	lr

08001018 <minus>:

Mat minus(Mat A,Mat B){
 8001018:	b084      	sub	sp, #16
 800101a:	b5b0      	push	{r4, r5, r7, lr}
 800101c:	b0a4      	sub	sp, #144	; 0x90
 800101e:	af00      	add	r7, sp, #0
 8001020:	6378      	str	r0, [r7, #52]	; 0x34
 8001022:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8001026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  Mat M;
  M.row = A.row;
 800102a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800102e:	65fb      	str	r3, [r7, #92]	; 0x5c
  M.col = A.col;
 8001030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001034:	663b      	str	r3, [r7, #96]	; 0x60
  float dataM[9] = {0};
 8001036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f004 f88c 	bl	800515c <memset>
  M = newmat(A.row, A.col, dataM);
 8001044:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001048:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800104c:	4638      	mov	r0, r7
 800104e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001052:	f7ff ff11 	bl	8000e78 <newmat>
 8001056:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800105a:	463d      	mov	r5, r7
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001068:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(int i = 0; i < A.row; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001072:	e042      	b.n	80010fa <minus+0xe2>
  {
    for(int j = 0; j < A.col; j++)
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800107a:	e033      	b.n	80010e4 <minus+0xcc>
    {
      M.entries[i][j] = A.entries[i][j] - B.entries[i][j];
 800107c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800108a:	4413      	add	r3, r2
 800108c:	3302      	adds	r3, #2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	33a0      	adds	r3, #160	; 0xa0
 8001092:	443b      	add	r3, r7
 8001094:	3304      	adds	r3, #4
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80010a8:	4413      	add	r3, r2
 80010aa:	3302      	adds	r3, #2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	33a0      	adds	r3, #160	; 0xa0
 80010b0:	443b      	add	r3, r7
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80010ca:	4413      	add	r3, r2
 80010cc:	3302      	adds	r3, #2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	3390      	adds	r3, #144	; 0x90
 80010d2:	443b      	add	r3, r7
 80010d4:	3b34      	subs	r3, #52	; 0x34
 80010d6:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < A.col; j++)
 80010da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010de:	3301      	adds	r3, #1
 80010e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbc5      	blt.n	800107c <minus+0x64>
  for(int i = 0; i < A.row; i++)
 80010f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010f4:	3301      	adds	r3, #1
 80010f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001102:	429a      	cmp	r2, r3
 8001104:	dbb6      	blt.n	8001074 <minus+0x5c>
    }
  }
  return M;
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	461d      	mov	r5, r3
 800110a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800110e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800111a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800111e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001120:	3790      	adds	r7, #144	; 0x90
 8001122:	46bd      	mov	sp, r7
 8001124:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <multiply>:

Mat multiply(Mat A,Mat B){
 800112c:	b084      	sub	sp, #16
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b0a6      	sub	sp, #152	; 0x98
 8001132:	af00      	add	r7, sp, #0
 8001134:	6378      	str	r0, [r7, #52]	; 0x34
 8001136:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800113a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  Mat M;
  M.row = A.row;
 800113e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001142:	663b      	str	r3, [r7, #96]	; 0x60
  M.col = B.col;
 8001144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001148:	667b      	str	r3, [r7, #100]	; 0x64
  float dataM[9] = {0};
 800114a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114e:	2224      	movs	r2, #36	; 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 f802 	bl	800515c <memset>
  M = newmat(A.row, B.col, dataM);
 8001158:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800115c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001160:	4638      	mov	r0, r7
 8001162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001166:	f7ff fe87 	bl	8000e78 <newmat>
 800116a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800116e:	463d      	mov	r5, r7
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(int i = 0; i < A.row; ++i)
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001186:	e062      	b.n	800124e <multiply+0x122>
  {
    for(int j = 0; j < B.col; ++j)
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800118e:	e053      	b.n	8001238 <multiply+0x10c>
    {
      for(int k = 0; k < A.col; ++k)
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001196:	e044      	b.n	8001222 <multiply+0xf6>
      {
        M.entries[i][j] += A.entries[i][k] * B.entries[k][j];
 8001198:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80011a6:	4413      	add	r3, r2
 80011a8:	3302      	adds	r3, #2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	3398      	adds	r3, #152	; 0x98
 80011ae:	443b      	add	r3, r7
 80011b0:	3b38      	subs	r3, #56	; 0x38
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011c4:	4413      	add	r3, r2
 80011c6:	3302      	adds	r3, #2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	33a8      	adds	r3, #168	; 0xa8
 80011cc:	443b      	add	r3, r7
 80011ce:	3304      	adds	r3, #4
 80011d0:	edd3 6a00 	vldr	s13, [r3]
 80011d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80011e2:	4413      	add	r3, r2
 80011e4:	3302      	adds	r3, #2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	33a8      	adds	r3, #168	; 0xa8
 80011ea:	443b      	add	r3, r7
 80011ec:	3330      	adds	r3, #48	; 0x30
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001208:	4413      	add	r3, r2
 800120a:	3302      	adds	r3, #2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	3398      	adds	r3, #152	; 0x98
 8001210:	443b      	add	r3, r7
 8001212:	3b38      	subs	r3, #56	; 0x38
 8001214:	edc3 7a00 	vstr	s15, [r3]
      for(int k = 0; k < A.col; ++k)
 8001218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800121c:	3301      	adds	r3, #1
 800121e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001226:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800122a:	429a      	cmp	r2, r3
 800122c:	dbb4      	blt.n	8001198 <multiply+0x6c>
    for(int j = 0; j < B.col; ++j)
 800122e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001232:	3301      	adds	r3, #1
 8001234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800123c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001240:	429a      	cmp	r2, r3
 8001242:	dba5      	blt.n	8001190 <multiply+0x64>
  for(int i = 0; i < A.row; ++i)
 8001244:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001248:	3301      	adds	r3, #1
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800124e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001256:	429a      	cmp	r2, r3
 8001258:	db96      	blt.n	8001188 <multiply+0x5c>
      }
    }
  }
  return M;
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	461d      	mov	r5, r3
 800125e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800126e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001272:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001274:	3798      	adds	r7, #152	; 0x98
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800127c:	b004      	add	sp, #16
 800127e:	4770      	bx	lr

08001280 <transpose>:

Mat transpose(Mat A){
 8001280:	b084      	sub	sp, #16
 8001282:	b5b0      	push	{r4, r5, r7, lr}
 8001284:	b0a4      	sub	sp, #144	; 0x90
 8001286:	af00      	add	r7, sp, #0
 8001288:	6378      	str	r0, [r7, #52]	; 0x34
 800128a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800128e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  Mat M;
  M.row = A.col;
 8001292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001296:	65fb      	str	r3, [r7, #92]	; 0x5c
  M.col = A.row;
 8001298:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800129c:	663b      	str	r3, [r7, #96]	; 0x60
  float dataM[9] = {0};
 800129e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 ff58 	bl	800515c <memset>
  M = newmat(A.col, A.row, dataM);
 80012ac:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80012b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80012b4:	4638      	mov	r0, r7
 80012b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ba:	f7ff fddd 	bl	8000e78 <newmat>
 80012be:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80012c2:	463d      	mov	r5, r7
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(int i = 0; i < A.row; ++i)
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012da:	e02f      	b.n	800133c <transpose+0xbc>
  {
    for(int j = 0; j < A.col; ++j)
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012e2:	e020      	b.n	8001326 <transpose+0xa6>
    {
      M.entries[j][i] = A.entries[i][j];
 80012e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80012f2:	4413      	add	r3, r2
 80012f4:	3302      	adds	r3, #2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	33a0      	adds	r3, #160	; 0xa0
 80012fa:	443b      	add	r3, r7
 80012fc:	3304      	adds	r3, #4
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800130e:	4413      	add	r3, r2
 8001310:	3302      	adds	r3, #2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	3390      	adds	r3, #144	; 0x90
 8001316:	443b      	add	r3, r7
 8001318:	3b34      	subs	r3, #52	; 0x34
 800131a:	6019      	str	r1, [r3, #0]
    for(int j = 0; j < A.col; ++j)
 800131c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001320:	3301      	adds	r3, #1
 8001322:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800132a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800132e:	429a      	cmp	r2, r3
 8001330:	dbd8      	blt.n	80012e4 <transpose+0x64>
  for(int i = 0; i < A.row; ++i)
 8001332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001336:	3301      	adds	r3, #1
 8001338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800133c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001340:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001344:	429a      	cmp	r2, r3
 8001346:	dbc9      	blt.n	80012dc <transpose+0x5c>
    }
  }
  return M;
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	461d      	mov	r5, r3
 800134c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001358:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800135c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001360:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001362:	3790      	adds	r7, #144	; 0x90
 8001364:	46bd      	mov	sp, r7
 8001366:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800136a:	b004      	add	sp, #16
 800136c:	4770      	bx	lr
	...

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f001 faff 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 f857 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f000 fa0f 	bl	80017a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001382:	f000 f9e3 	bl	800174c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001386:	f000 f8b9 	bl	80014fc <MX_TIM1_Init>
  MX_TIM3_Init();
 800138a:	f000 f90f 	bl	80015ac <MX_TIM3_Init>
  MX_TIM4_Init();
 800138e:	f000 f98f 	bl	80016b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	//micro
	HAL_TIM_Base_Start_IT(&htim4);
 8001392:	4821      	ldr	r0, [pc, #132]	; (8001418 <main+0xa8>)
 8001394:	f002 fb54 	bl	8003a40 <HAL_TIM_Base_Start_IT>
	//Encoder
	HAL_TIM_Base_Start_IT(&htim1);
 8001398:	4820      	ldr	r0, [pc, #128]	; (800141c <main+0xac>)
 800139a:	f002 fb51 	bl	8003a40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800139e:	213c      	movs	r1, #60	; 0x3c
 80013a0:	481e      	ldr	r0, [pc, #120]	; (800141c <main+0xac>)
 80013a2:	f002 fd5f 	bl	8003e64 <HAL_TIM_Encoder_Start>

	//PWM
	HAL_TIM_Base_Start(&htim3);
 80013a6:	481e      	ldr	r0, [pc, #120]	; (8001420 <main+0xb0>)
 80013a8:	f002 faf0 	bl	800398c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013ac:	2100      	movs	r1, #0
 80013ae:	481c      	ldr	r0, [pc, #112]	; (8001420 <main+0xb0>)
 80013b0:	f002 fc02 	bl	8003bb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013b4:	2104      	movs	r1, #4
 80013b6:	481a      	ldr	r0, [pc, #104]	; (8001420 <main+0xb0>)
 80013b8:	f002 fbfe 	bl	8003bb8 <HAL_TIM_PWM_Start>

	uint32_t Timestamp = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
	setmatrix();
 80013c0:	f000 fe76 	bl	80020b0 <setmatrix>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Unwrap();
 80013c4:	f000 fa5a 	bl	800187c <Unwrap>
	  if(HAL_GetTick()-Timestamp >10)
 80013c8:	f001 fb3c 	bl	8002a44 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b0a      	cmp	r3, #10
 80013d4:	d9f6      	bls.n	80013c4 <main+0x54>
	  {
		  prediction();
 80013d6:	f000 fabd 	bl	8001954 <prediction>
		  update();
 80013da:	f000 fbc1 	bl	8001b60 <update>
		  kalmanfilter();
 80013de:	f000 fe1f 	bl	8002020 <kalmanfilter>

		  calPWM();
 80013e2:	f001 f841 	bl	8002468 <calPWM>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut1);
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <main+0xb4>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <main+0xb0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	ee17 2a90 	vmov	r2, s15
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWMOut2);
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <main+0xb8>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <main+0xb0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001408:	ee17 2a90 	vmov	r2, s15
 800140c:	639a      	str	r2, [r3, #56]	; 0x38

		  Timestamp = HAL_GetTick();
 800140e:	f001 fb19 	bl	8002a44 <HAL_GetTick>
 8001412:	6078      	str	r0, [r7, #4]
	  Unwrap();
 8001414:	e7d6      	b.n	80013c4 <main+0x54>
 8001416:	bf00      	nop
 8001418:	200000c4 	.word	0x200000c4
 800141c:	20000034 	.word	0x20000034
 8001420:	2000007c 	.word	0x2000007c
 8001424:	20000178 	.word	0x20000178
 8001428:	2000017c 	.word	0x2000017c

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fe8e 	bl	800515c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <SystemClock_Config+0xc8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <SystemClock_Config+0xc8>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <SystemClock_Config+0xc8>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <SystemClock_Config+0xcc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <SystemClock_Config+0xcc>)
 8001476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <SystemClock_Config+0xcc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001490:	2310      	movs	r3, #16
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001494:	2302      	movs	r3, #2
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001498:	2300      	movs	r3, #0
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800149c:	2308      	movs	r3, #8
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a8:	2304      	movs	r3, #4
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fd83 	bl	8002fbc <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014bc:	f001 f8a4 	bl	8002608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2103      	movs	r1, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 ffe5 	bl	80034ac <HAL_RCC_ClockConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014e8:	f001 f88e 	bl	8002608 <Error_Handler>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	; 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fe26 	bl	800515c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_TIM1_Init+0xa8>)
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <MX_TIM1_Init+0xac>)
 800151c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_TIM1_Init+0xa8>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_TIM1_Init+0xa8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_TIM1_Init+0xa8>)
 800152c:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_TIM1_Init+0xa8>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_TIM1_Init+0xa8>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM1_Init+0xa8>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001544:	2303      	movs	r3, #3
 8001546:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_TIM1_Init+0xa8>)
 8001570:	f002 fbd2 	bl	8003d18 <HAL_TIM_Encoder_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800157a:	f001 f845 	bl	8002608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_TIM1_Init+0xa8>)
 800158c:	f003 fa7e 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001596:	f001 f837 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	; 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000034 	.word	0x20000034
 80015a8:	40010000 	.word	0x40010000

080015ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <MX_TIM3_Init+0xfc>)
 80015de:	4a33      	ldr	r2, [pc, #204]	; (80016ac <MX_TIM3_Init+0x100>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <MX_TIM3_Init+0xfc>)
 80015e4:	2209      	movs	r2, #9
 80015e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <MX_TIM3_Init+0xfc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <MX_TIM3_Init+0xfc>)
 80015f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80015f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <MX_TIM3_Init+0xfc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_TIM3_Init+0xfc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001602:	4829      	ldr	r0, [pc, #164]	; (80016a8 <MX_TIM3_Init+0xfc>)
 8001604:	f002 f972 	bl	80038ec <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800160e:	f000 fffb 	bl	8002608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161c:	4619      	mov	r1, r3
 800161e:	4822      	ldr	r0, [pc, #136]	; (80016a8 <MX_TIM3_Init+0xfc>)
 8001620:	f002 fe78 	bl	8004314 <HAL_TIM_ConfigClockSource>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800162a:	f000 ffed 	bl	8002608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800162e:	481e      	ldr	r0, [pc, #120]	; (80016a8 <MX_TIM3_Init+0xfc>)
 8001630:	f002 fa68 	bl	8003b04 <HAL_TIM_PWM_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800163a:	f000 ffe5 	bl	8002608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	4619      	mov	r1, r3
 800164c:	4816      	ldr	r0, [pc, #88]	; (80016a8 <MX_TIM3_Init+0xfc>)
 800164e:	f003 fa1d 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001658:	f000 ffd6 	bl	8002608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165c:	2360      	movs	r3, #96	; 0x60
 800165e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM3_Init+0xfc>)
 8001674:	f002 fd8c 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800167e:	f000 ffc3 	bl	8002608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2204      	movs	r2, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM3_Init+0xfc>)
 800168a:	f002 fd81 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001694:	f000 ffb8 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM3_Init+0xfc>)
 800169a:	f001 f871 	bl	8002780 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000007c 	.word	0x2000007c
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM4_Init+0x94>)
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <MX_TIM4_Init+0x98>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM4_Init+0x94>)
 80016d4:	2263      	movs	r2, #99	; 0x63
 80016d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM4_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_TIM4_Init+0x94>)
 80016e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80016e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_TIM4_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM4_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <MX_TIM4_Init+0x94>)
 80016f4:	f002 f8fa 	bl	80038ec <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016fe:	f000 ff83 	bl	8002608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_TIM4_Init+0x94>)
 8001710:	f002 fe00 	bl	8004314 <HAL_TIM_ConfigClockSource>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800171a:	f000 ff75 	bl	8002608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <MX_TIM4_Init+0x94>)
 800172c:	f003 f9ae 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001736:	f000 ff67 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000c4 	.word	0x200000c4
 8001748:	40000800 	.word	0x40000800

0800174c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART2_UART_Init+0x4c>)
 8001784:	f003 fa04 	bl	8004b90 <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800178e:	f000 ff3b 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000010c 	.word	0x2000010c
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <MX_GPIO_Init+0xd0>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_GPIO_Init+0xd0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_GPIO_Init+0xd0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <MX_GPIO_Init+0xd0>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_GPIO_Init+0xd0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2120      	movs	r1, #32
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <MX_GPIO_Init+0xd4>)
 800182c:	f001 fbac 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	480c      	ldr	r0, [pc, #48]	; (8001878 <MX_GPIO_Init+0xd8>)
 8001848:	f001 fa1a 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800184c:	2320      	movs	r3, #32
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_GPIO_Init+0xd4>)
 8001864:	f001 fa0c 	bl	8002c80 <HAL_GPIO_Init>

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020800 	.word	0x40020800

0800187c <Unwrap>:

/* USER CODE BEGIN 4 */
void Unwrap()
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	angle_before = angle;
 8001880:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <Unwrap+0xb8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <Unwrap+0xbc>)
 8001886:	6013      	str	r3, [r2, #0]
	angle = Rads;
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <Unwrap+0xc0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a29      	ldr	r2, [pc, #164]	; (8001934 <Unwrap+0xb8>)
 800188e:	6013      	str	r3, [r2, #0]
	angle_base_before = angle_base;
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <Unwrap+0xc4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <Unwrap+0xc8>)
 8001896:	6013      	str	r3, [r2, #0]
	if ((angle - angle_before) <= -threshold){
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <Unwrap+0xb8>)
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <Unwrap+0xbc>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <Unwrap+0xcc>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eef1 7a67 	vneg.f32	s15, s15
 80018b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d80b      	bhi.n	80018d4 <Unwrap+0x58>
		angle_base = angle_base_before + angle_max;
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <Unwrap+0xc8>)
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <Unwrap+0xd0>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <Unwrap+0xc4>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]
 80018d2:	e01f      	b.n	8001914 <Unwrap+0x98>
	}
	else if ((angle - angle_before) >= threshold){
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <Unwrap+0xb8>)
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <Unwrap+0xbc>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <Unwrap+0xcc>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	db0b      	blt.n	800190c <Unwrap+0x90>
		angle_base = angle_base_before - angle_max;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <Unwrap+0xc8>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <Unwrap+0xd0>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <Unwrap+0xc4>)
 8001906:	edc3 7a00 	vstr	s15, [r3]
 800190a:	e003      	b.n	8001914 <Unwrap+0x98>
	}
	else{
		angle_base = angle_base_before;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <Unwrap+0xc8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <Unwrap+0xc4>)
 8001912:	6013      	str	r3, [r2, #0]
	}
	angle_sum = angle + angle_base;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <Unwrap+0xb8>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <Unwrap+0xc4>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <Unwrap+0xd4>)
 8001926:	edc3 7a00 	vstr	s15, [r3]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000154 	.word	0x20000154
 8001938:	20000158 	.word	0x20000158
 800193c:	20000150 	.word	0x20000150
 8001940:	20000164 	.word	0x20000164
 8001944:	20000160 	.word	0x20000160
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004
 8001950:	2000015c 	.word	0x2000015c

08001954 <prediction>:

void prediction(){
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	b0e5      	sub	sp, #404	; 0x194
 8001958:	af14      	add	r7, sp, #80	; 0x50
	x_new = multiply(A, x);
 800195a:	4b7a      	ldr	r3, [pc, #488]	; (8001b44 <prediction+0x1f0>)
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	f107 0c08 	add.w	ip, r7, #8
 8001962:	4e79      	ldr	r6, [pc, #484]	; (8001b48 <prediction+0x1f4>)
 8001964:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <prediction+0x1f8>)
 8001966:	ac08      	add	r4, sp, #32
 8001968:	461d      	mov	r5, r3
 800196a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800197a:	466d      	mov	r5, sp
 800197c:	f106 040c 	add.w	r4, r6, #12
 8001980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001984:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001988:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800198c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001990:	4660      	mov	r0, ip
 8001992:	f7ff fbcb 	bl	800112c <multiply>
 8001996:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800199a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800199e:	687c      	ldr	r4, [r7, #4]
 80019a0:	461d      	mov	r5, r3
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P_new = sum(multiply(multiply(A, P), transpose(A)), multiply(multiply(G, Q), transpose(G)));
 80019b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019b6:	f5a3 7c84 	sub.w	ip, r3, #264	; 0x108
 80019ba:	4e63      	ldr	r6, [pc, #396]	; (8001b48 <prediction+0x1f4>)
 80019bc:	4b64      	ldr	r3, [pc, #400]	; (8001b50 <prediction+0x1fc>)
 80019be:	ac08      	add	r4, sp, #32
 80019c0:	461d      	mov	r5, r3
 80019c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019d2:	466d      	mov	r5, sp
 80019d4:	f106 040c 	add.w	r4, r6, #12
 80019d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019e4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019e8:	4660      	mov	r0, ip
 80019ea:	f7ff fb9f 	bl	800112c <multiply>
 80019ee:	f107 0c64 	add.w	ip, r7, #100	; 0x64
 80019f2:	4e55      	ldr	r6, [pc, #340]	; (8001b48 <prediction+0x1f4>)
 80019f4:	466d      	mov	r5, sp
 80019f6:	f106 040c 	add.w	r4, r6, #12
 80019fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a0a:	4660      	mov	r0, ip
 8001a0c:	f7ff fc38 	bl	8001280 <transpose>
 8001a10:	f107 0c90 	add.w	ip, r7, #144	; 0x90
 8001a14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a18:	f5a3 7684 	sub.w	r6, r3, #264	; 0x108
 8001a1c:	ad08      	add	r5, sp, #32
 8001a1e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a32:	466d      	mov	r5, sp
 8001a34:	f106 040c 	add.w	r4, r6, #12
 8001a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a44:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a48:	4660      	mov	r0, ip
 8001a4a:	f7ff fb6f 	bl	800112c <multiply>
 8001a4e:	f107 0cbc 	add.w	ip, r7, #188	; 0xbc
 8001a52:	4e40      	ldr	r6, [pc, #256]	; (8001b54 <prediction+0x200>)
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <prediction+0x204>)
 8001a56:	ac08      	add	r4, sp, #32
 8001a58:	461d      	mov	r5, r3
 8001a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a6a:	466d      	mov	r5, sp
 8001a6c:	f106 040c 	add.w	r4, r6, #12
 8001a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a78:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a7c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a80:	4660      	mov	r0, ip
 8001a82:	f7ff fb53 	bl	800112c <multiply>
 8001a86:	f107 0ce8 	add.w	ip, r7, #232	; 0xe8
 8001a8a:	4e32      	ldr	r6, [pc, #200]	; (8001b54 <prediction+0x200>)
 8001a8c:	466d      	mov	r5, sp
 8001a8e:	f106 040c 	add.w	r4, r6, #12
 8001a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a9e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001aa2:	4660      	mov	r0, ip
 8001aa4:	f7ff fbec 	bl	8001280 <transpose>
 8001aa8:	f507 768a 	add.w	r6, r7, #276	; 0x114
 8001aac:	ad08      	add	r5, sp, #32
 8001aae:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001abe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ac2:	466d      	mov	r5, sp
 8001ac4:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ad0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ad4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ada:	4630      	mov	r0, r6
 8001adc:	f7ff fb26 	bl	800112c <multiply>
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <prediction+0x208>)
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	f107 0608 	add.w	r6, r7, #8
 8001ae8:	ad08      	add	r5, sp, #32
 8001aea:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8001aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001afa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001afe:	466d      	mov	r5, sp
 8001b00:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8001b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b10:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7ff f9f4 	bl	8000f04 <sum>
 8001b1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b24:	687c      	ldr	r4, [r7, #4]
 8001b26:	461d      	mov	r5, r3
 8001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001b38:	bf00      	nop
 8001b3a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000364 	.word	0x20000364
 8001b48:	200001ac 	.word	0x200001ac
 8001b4c:	20000338 	.word	0x20000338
 8001b50:	20000390 	.word	0x20000390
 8001b54:	200001d8 	.word	0x200001d8
 8001b58:	20000204 	.word	0x20000204
 8001b5c:	200003bc 	.word	0x200003bc

08001b60 <update>:

void update(){
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001b66:	af14      	add	r7, sp, #80	; 0x50
	static Mat sumK;
	sumK = sum(R, multiply(multiply(C, P_new), transpose(C)));
 8001b68:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001b6c:	f5a3 7cb0 	sub.w	ip, r3, #352	; 0x160
 8001b70:	4ec7      	ldr	r6, [pc, #796]	; (8001e90 <update+0x330>)
 8001b72:	4bc8      	ldr	r3, [pc, #800]	; (8001e94 <update+0x334>)
 8001b74:	ac08      	add	r4, sp, #32
 8001b76:	461d      	mov	r5, r3
 8001b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b88:	466d      	mov	r5, sp
 8001b8a:	f106 040c 	add.w	r4, r6, #12
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b9a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b9e:	4660      	mov	r0, ip
 8001ba0:	f7ff fac4 	bl	800112c <multiply>
 8001ba4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001ba8:	f5a3 7c9a 	sub.w	ip, r3, #308	; 0x134
 8001bac:	4eb8      	ldr	r6, [pc, #736]	; (8001e90 <update+0x330>)
 8001bae:	466d      	mov	r5, sp
 8001bb0:	f106 040c 	add.w	r4, r6, #12
 8001bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bbc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bc0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001bc4:	4660      	mov	r0, ip
 8001bc6:	f7ff fb5b 	bl	8001280 <transpose>
 8001bca:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001bce:	f5a3 7c84 	sub.w	ip, r3, #264	; 0x108
 8001bd2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001bd6:	f5a3 76b0 	sub.w	r6, r3, #352	; 0x160
 8001bda:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001bde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001be2:	ac08      	add	r4, sp, #32
 8001be4:	461d      	mov	r5, r3
 8001be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bf6:	466d      	mov	r5, sp
 8001bf8:	f106 040c 	add.w	r4, r6, #12
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c08:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c0c:	4660      	mov	r0, ip
 8001c0e:	f7ff fa8d 	bl	800112c <multiply>
 8001c12:	4ba1      	ldr	r3, [pc, #644]	; (8001e98 <update+0x338>)
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	f107 0c08 	add.w	ip, r7, #8
 8001c1a:	4ea0      	ldr	r6, [pc, #640]	; (8001e9c <update+0x33c>)
 8001c1c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c24:	ac08      	add	r4, sp, #32
 8001c26:	461d      	mov	r5, r3
 8001c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c38:	466d      	mov	r5, sp
 8001c3a:	f106 040c 	add.w	r4, r6, #12
 8001c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c4e:	4660      	mov	r0, ip
 8001c50:	f7ff f958 	bl	8000f04 <sum>
 8001c54:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c5c:	687c      	ldr	r4, [r7, #4]
 8001c5e:	461d      	mov	r5, r3
 8001c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float data_sumK[9] = {1/sumK.entries[0][0]};
 8001c70:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c78:	4618      	mov	r0, r3
 8001c7a:	2324      	movs	r3, #36	; 0x24
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f003 fa6c 	bl	800515c <memset>
 8001c84:	4b84      	ldr	r3, [pc, #528]	; (8001e98 <update+0x338>)
 8001c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c92:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c96:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
	sumK = newmat(1, 1, data_sumK);
 8001c9e:	4c7e      	ldr	r4, [pc, #504]	; (8001e98 <update+0x338>)
 8001ca0:	f107 0008 	add.w	r0, r7, #8
 8001ca4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2101      	movs	r1, #1
 8001cac:	f7ff f8e4 	bl	8000e78 <newmat>
 8001cb0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001cb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cb8:	461d      	mov	r5, r3
 8001cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	K = multiply(multiply(P_new, transpose(C)), sumK);
 8001cca:	f507 7c82 	add.w	ip, r7, #260	; 0x104
 8001cce:	4e70      	ldr	r6, [pc, #448]	; (8001e90 <update+0x330>)
 8001cd0:	466d      	mov	r5, sp
 8001cd2:	f106 040c 	add.w	r4, r6, #12
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ce2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ce6:	4660      	mov	r0, ip
 8001ce8:	f7ff faca 	bl	8001280 <transpose>
 8001cec:	f507 7c98 	add.w	ip, r7, #304	; 0x130
 8001cf0:	4e68      	ldr	r6, [pc, #416]	; (8001e94 <update+0x334>)
 8001cf2:	ad08      	add	r5, sp, #32
 8001cf4:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8001cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d00:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d08:	466d      	mov	r5, sp
 8001d0a:	f106 040c 	add.w	r4, r6, #12
 8001d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d1a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d1e:	4660      	mov	r0, ip
 8001d20:	f7ff fa04 	bl	800112c <multiply>
 8001d24:	4b5e      	ldr	r3, [pc, #376]	; (8001ea0 <update+0x340>)
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	f107 0608 	add.w	r6, r7, #8
 8001d2c:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <update+0x338>)
 8001d2e:	ac08      	add	r4, sp, #32
 8001d30:	461d      	mov	r5, r3
 8001d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d42:	466d      	mov	r5, sp
 8001d44:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8001d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f7ff f9e6 	bl	800112c <multiply>
 8001d60:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001d64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d68:	687c      	ldr	r4, [r7, #4]
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P = multiply(minus(I, multiply(K, C)), P_new);
 8001d7c:	f507 7cae 	add.w	ip, r7, #348	; 0x15c
 8001d80:	4e47      	ldr	r6, [pc, #284]	; (8001ea0 <update+0x340>)
 8001d82:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <update+0x330>)
 8001d84:	ac08      	add	r4, sp, #32
 8001d86:	461d      	mov	r5, r3
 8001d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d98:	466d      	mov	r5, sp
 8001d9a:	f106 040c 	add.w	r4, r6, #12
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001daa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001dae:	4660      	mov	r0, ip
 8001db0:	f7ff f9bc 	bl	800112c <multiply>
 8001db4:	f507 7cc4 	add.w	ip, r7, #392	; 0x188
 8001db8:	4e3a      	ldr	r6, [pc, #232]	; (8001ea4 <update+0x344>)
 8001dba:	ad08      	add	r5, sp, #32
 8001dbc:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 8001dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001dcc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 040c 	add.w	r4, r6, #12
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001de2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001de6:	4660      	mov	r0, ip
 8001de8:	f7ff f916 	bl	8001018 <minus>
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <update+0x348>)
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	f107 0608 	add.w	r6, r7, #8
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <update+0x334>)
 8001df6:	ac08      	add	r4, sp, #32
 8001df8:	461d      	mov	r5, r3
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e0a:	466d      	mov	r5, sp
 8001e0c:	f507 74ca 	add.w	r4, r7, #404	; 0x194
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e1c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e22:	4630      	mov	r0, r6
 8001e24:	f7ff f982 	bl	800112c <multiply>
 8001e28:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001e2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e30:	687c      	ldr	r4, [r7, #4]
 8001e32:	461d      	mov	r5, r3
 8001e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float data_input[9] = {angle_sum};
 8001e44:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001e48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	2324      	movs	r3, #36	; 0x24
 8001e50:	461a      	mov	r2, r3
 8001e52:	2100      	movs	r1, #0
 8001e54:	f003 f982 	bl	800515c <memset>
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <update+0x34c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001e60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e64:	601a      	str	r2, [r3, #0]
	input = newmat(1, 1, data_input);
 8001e66:	4c12      	ldr	r4, [pc, #72]	; (8001eb0 <update+0x350>)
 8001e68:	f107 0008 	add.w	r0, r7, #8
 8001e6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e70:	2201      	movs	r2, #1
 8001e72:	2101      	movs	r1, #1
 8001e74:	f7ff f800 	bl	8000e78 <newmat>
 8001e78:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001e7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e80:	461d      	mov	r5, r3
 8001e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e8e:	e011      	b.n	8001eb4 <update+0x354>
 8001e90:	2000025c 	.word	0x2000025c
 8001e94:	200003bc 	.word	0x200003bc
 8001e98:	200003e8 	.word	0x200003e8
 8001e9c:	20000288 	.word	0x20000288
 8001ea0:	20000230 	.word	0x20000230
 8001ea4:	20000180 	.word	0x20000180
 8001ea8:	20000390 	.word	0x20000390
 8001eac:	2000015c 	.word	0x2000015c
 8001eb0:	200002b4 	.word	0x200002b4
 8001eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	y_old = multiply(C, x_new);
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <update+0x4a4>)
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	f107 0c08 	add.w	ip, r7, #8
 8001ec0:	4e51      	ldr	r6, [pc, #324]	; (8002008 <update+0x4a8>)
 8001ec2:	4b52      	ldr	r3, [pc, #328]	; (800200c <update+0x4ac>)
 8001ec4:	ac08      	add	r4, sp, #32
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ed4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ed8:	466d      	mov	r5, sp
 8001eda:	f106 040c 	add.w	r4, r6, #12
 8001ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ee6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001eea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001eee:	4660      	mov	r0, ip
 8001ef0:	f7ff f91c 	bl	800112c <multiply>
 8001ef4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001ef8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001efc:	687c      	ldr	r4, [r7, #4]
 8001efe:	461d      	mov	r5, r3
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	y = minus(input, y_old);
 8001f10:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <update+0x4b0>)
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	f107 0c08 	add.w	ip, r7, #8
 8001f18:	4e3e      	ldr	r6, [pc, #248]	; (8002014 <update+0x4b4>)
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <update+0x4a4>)
 8001f1c:	ac08      	add	r4, sp, #32
 8001f1e:	461d      	mov	r5, r3
 8001f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f30:	466d      	mov	r5, sp
 8001f32:	f106 040c 	add.w	r4, r6, #12
 8001f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f42:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001f46:	4660      	mov	r0, ip
 8001f48:	f7ff f866 	bl	8001018 <minus>
 8001f4c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001f50:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f54:	687c      	ldr	r4, [r7, #4]
 8001f56:	461d      	mov	r5, r3
 8001f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	x = sum(multiply(K, y), x_new);
 8001f68:	f507 7cda 	add.w	ip, r7, #436	; 0x1b4
 8001f6c:	4e2a      	ldr	r6, [pc, #168]	; (8002018 <update+0x4b8>)
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <update+0x4b0>)
 8001f70:	ac08      	add	r4, sp, #32
 8001f72:	461d      	mov	r5, r3
 8001f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f84:	466d      	mov	r5, sp
 8001f86:	f106 040c 	add.w	r4, r6, #12
 8001f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f96:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001f9a:	4660      	mov	r0, ip
 8001f9c:	f7ff f8c6 	bl	800112c <multiply>
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <update+0x4bc>)
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	f107 0608 	add.w	r6, r7, #8
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <update+0x4ac>)
 8001faa:	ac08      	add	r4, sp, #32
 8001fac:	461d      	mov	r5, r3
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fbe:	466d      	mov	r5, sp
 8001fc0:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001fd0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	f7fe ff94 	bl	8000f04 <sum>
 8001fdc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001fe0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fe4:	687c      	ldr	r4, [r7, #4]
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ff8:	bf00      	nop
 8001ffa:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002002:	bf00      	nop
 8002004:	2000030c 	.word	0x2000030c
 8002008:	2000025c 	.word	0x2000025c
 800200c:	20000364 	.word	0x20000364
 8002010:	200002e0 	.word	0x200002e0
 8002014:	200002b4 	.word	0x200002b4
 8002018:	20000230 	.word	0x20000230
 800201c:	20000338 	.word	0x20000338

08002020 <kalmanfilter>:

void kalmanfilter(){
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	b0a3      	sub	sp, #140	; 0x8c
 8002024:	af14      	add	r7, sp, #80	; 0x50
	y = multiply(C, x);
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <kalmanfilter+0x78>)
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	f107 0c08 	add.w	ip, r7, #8
 800202e:	4e1b      	ldr	r6, [pc, #108]	; (800209c <kalmanfilter+0x7c>)
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <kalmanfilter+0x80>)
 8002032:	ac08      	add	r4, sp, #32
 8002034:	461d      	mov	r5, r3
 8002036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002046:	466d      	mov	r5, sp
 8002048:	f106 040c 	add.w	r4, r6, #12
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002050:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002054:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002058:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800205c:	4660      	mov	r0, ip
 800205e:	f7ff f865 	bl	800112c <multiply>
 8002062:	687d      	ldr	r5, [r7, #4]
 8002064:	f107 0408 	add.w	r4, r7, #8
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002074:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	position = y.entries[0][0];
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <kalmanfilter+0x78>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <kalmanfilter+0x84>)
 800207e:	6013      	str	r3, [r2, #0]
	velocity = x.entries[1][0];
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <kalmanfilter+0x80>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <kalmanfilter+0x88>)
 8002086:	6013      	str	r3, [r2, #0]
	accerelation = x.entries[2][0];
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <kalmanfilter+0x80>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <kalmanfilter+0x8c>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	373c      	adds	r7, #60	; 0x3c
 8002094:	46bd      	mov	sp, r7
 8002096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002098:	200002e0 	.word	0x200002e0
 800209c:	2000025c 	.word	0x2000025c
 80020a0:	20000338 	.word	0x20000338
 80020a4:	20000168 	.word	0x20000168
 80020a8:	2000016c 	.word	0x2000016c
 80020ac:	20000170 	.word	0x20000170

080020b0 <setmatrix>:

void setmatrix(){
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b0cc      	sub	sp, #304	; 0x130
 80020b4:	af00      	add	r7, sp, #0
	float data_I[9] = {1,0,0,0,1,0,0,0,1};
 80020b6:	4bd0      	ldr	r3, [pc, #832]	; (80023f8 <setmatrix+0x348>)
 80020b8:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 80020bc:	461d      	mov	r5, r3
 80020be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c6:	682b      	ldr	r3, [r5, #0]
 80020c8:	6023      	str	r3, [r4, #0]
	float data_A[9] = {1,dt,0.5*dt*dt,0,1,dt,0,0,1};
 80020ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020d2:	4bca      	ldr	r3, [pc, #808]	; (80023fc <setmatrix+0x34c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80020da:	4bc8      	ldr	r3, [pc, #800]	; (80023fc <setmatrix+0x34c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9de 	bl	80004a0 <__aeabi_f2d>
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4bc5      	ldr	r3, [pc, #788]	; (8002400 <setmatrix+0x350>)
 80020ea:	f7fe fa31 	bl	8000550 <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4614      	mov	r4, r2
 80020f4:	461d      	mov	r5, r3
 80020f6:	4bc1      	ldr	r3, [pc, #772]	; (80023fc <setmatrix+0x34c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe f9d0 	bl	80004a0 <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4620      	mov	r0, r4
 8002106:	4629      	mov	r1, r5
 8002108:	f7fe fa22 	bl	8000550 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe fcde 	bl	8000ad4 <__aeabi_d2f>
 8002118:	4603      	mov	r3, r0
 800211a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002126:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800212a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800212e:	4bb3      	ldr	r3, [pc, #716]	; (80023fc <setmatrix+0x34c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002146:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800214a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	float data_G[9] = {dt*dt,dt,1};
 800214e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002152:	2224      	movs	r2, #36	; 0x24
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f003 f800 	bl	800515c <memset>
 800215c:	4ba7      	ldr	r3, [pc, #668]	; (80023fc <setmatrix+0x34c>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	4ba6      	ldr	r3, [pc, #664]	; (80023fc <setmatrix+0x34c>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8002170:	4ba2      	ldr	r3, [pc, #648]	; (80023fc <setmatrix+0x34c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002178:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800217c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float data_C[9] = {1,0,0};
 8002180:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002184:	2224      	movs	r2, #36	; 0x24
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f002 ffe7 	bl	800515c <memset>
 800218e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float data_R[9] = {0.0033};
 8002196:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 ffdc 	bl	800515c <memset>
 80021a4:	4b97      	ldr	r3, [pc, #604]	; (8002404 <setmatrix+0x354>)
 80021a6:	67fb      	str	r3, [r7, #124]	; 0x7c
	float data_Q[9] = {0.0};
 80021a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ac:	2224      	movs	r2, #36	; 0x24
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 ffd3 	bl	800515c <memset>
	float data_zero[9] = {0,0,0,0,0,0,0,0,0};
 80021b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 ffcc 	bl	800515c <memset>

	I = newmat(3, 3, data_I);
 80021c4:	4c90      	ldr	r4, [pc, #576]	; (8002408 <setmatrix+0x358>)
 80021c6:	4638      	mov	r0, r7
 80021c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021cc:	2203      	movs	r2, #3
 80021ce:	2103      	movs	r1, #3
 80021d0:	f7fe fe52 	bl	8000e78 <newmat>
 80021d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021dc:	461d      	mov	r5, r3
 80021de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	A = newmat(3, 3, data_A);
 80021ee:	4c87      	ldr	r4, [pc, #540]	; (800240c <setmatrix+0x35c>)
 80021f0:	4638      	mov	r0, r7
 80021f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021f6:	2203      	movs	r2, #3
 80021f8:	2103      	movs	r1, #3
 80021fa:	f7fe fe3d 	bl	8000e78 <newmat>
 80021fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	G = newmat(3, 1, data_G);
 8002218:	4c7d      	ldr	r4, [pc, #500]	; (8002410 <setmatrix+0x360>)
 800221a:	4638      	mov	r0, r7
 800221c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002220:	2201      	movs	r2, #1
 8002222:	2103      	movs	r1, #3
 8002224:	f7fe fe28 	bl	8000e78 <newmat>
 8002228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800222c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002230:	461d      	mov	r5, r3
 8002232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800223e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	C = newmat(1, 3, data_C);
 8002242:	4c74      	ldr	r4, [pc, #464]	; (8002414 <setmatrix+0x364>)
 8002244:	4638      	mov	r0, r7
 8002246:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800224a:	2203      	movs	r2, #3
 800224c:	2101      	movs	r1, #1
 800224e:	f7fe fe13 	bl	8000e78 <newmat>
 8002252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800225a:	461d      	mov	r5, r3
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	R = newmat(1, 1, data_R);
 800226c:	4c6a      	ldr	r4, [pc, #424]	; (8002418 <setmatrix+0x368>)
 800226e:	4638      	mov	r0, r7
 8002270:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002274:	2201      	movs	r2, #1
 8002276:	2101      	movs	r1, #1
 8002278:	f7fe fdfe 	bl	8000e78 <newmat>
 800227c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002284:	461d      	mov	r5, r3
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Q = newmat(1, 1, data_Q);
 8002296:	4c61      	ldr	r4, [pc, #388]	; (800241c <setmatrix+0x36c>)
 8002298:	4638      	mov	r0, r7
 800229a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800229e:	2201      	movs	r2, #1
 80022a0:	2101      	movs	r1, #1
 80022a2:	f7fe fde9 	bl	8000e78 <newmat>
 80022a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022ae:	461d      	mov	r5, r3
 80022b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	input = newmat(1, 1, data_zero);
 80022c0:	4c57      	ldr	r4, [pc, #348]	; (8002420 <setmatrix+0x370>)
 80022c2:	4638      	mov	r0, r7
 80022c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c8:	2201      	movs	r2, #1
 80022ca:	2101      	movs	r1, #1
 80022cc:	f7fe fdd4 	bl	8000e78 <newmat>
 80022d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022d8:	461d      	mov	r5, r3
 80022da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	K = newmat(3, 1, data_zero);
 80022ea:	4c4e      	ldr	r4, [pc, #312]	; (8002424 <setmatrix+0x374>)
 80022ec:	4638      	mov	r0, r7
 80022ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f2:	2201      	movs	r2, #1
 80022f4:	2103      	movs	r1, #3
 80022f6:	f7fe fdbf 	bl	8000e78 <newmat>
 80022fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002302:	461d      	mov	r5, r3
 8002304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800230a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	x = newmat(3, 1, data_zero);
 8002314:	4c44      	ldr	r4, [pc, #272]	; (8002428 <setmatrix+0x378>)
 8002316:	4638      	mov	r0, r7
 8002318:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800231c:	2201      	movs	r2, #1
 800231e:	2103      	movs	r1, #3
 8002320:	f7fe fdaa 	bl	8000e78 <newmat>
 8002324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800232c:	461d      	mov	r5, r3
 800232e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800233a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	x_new = newmat(3, 1, data_zero);
 800233e:	4c3b      	ldr	r4, [pc, #236]	; (800242c <setmatrix+0x37c>)
 8002340:	4638      	mov	r0, r7
 8002342:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002346:	2201      	movs	r2, #1
 8002348:	2103      	movs	r1, #3
 800234a:	f7fe fd95 	bl	8000e78 <newmat>
 800234e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002356:	461d      	mov	r5, r3
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P = newmat(3, 3, data_zero);
 8002368:	4c31      	ldr	r4, [pc, #196]	; (8002430 <setmatrix+0x380>)
 800236a:	4638      	mov	r0, r7
 800236c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002370:	2203      	movs	r2, #3
 8002372:	2103      	movs	r1, #3
 8002374:	f7fe fd80 	bl	8000e78 <newmat>
 8002378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800237c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002380:	461d      	mov	r5, r3
 8002382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800238a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800238e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	P_new = newmat(3, 3, data_zero);
 8002392:	4c28      	ldr	r4, [pc, #160]	; (8002434 <setmatrix+0x384>)
 8002394:	4638      	mov	r0, r7
 8002396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800239a:	2203      	movs	r2, #3
 800239c:	2103      	movs	r1, #3
 800239e:	f7fe fd6b 	bl	8000e78 <newmat>
 80023a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023aa:	461d      	mov	r5, r3
 80023ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	y = newmat(1, 1, data_zero);
 80023bc:	4c1e      	ldr	r4, [pc, #120]	; (8002438 <setmatrix+0x388>)
 80023be:	4638      	mov	r0, r7
 80023c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023c4:	2201      	movs	r2, #1
 80023c6:	2101      	movs	r1, #1
 80023c8:	f7fe fd56 	bl	8000e78 <newmat>
 80023cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023d4:	461d      	mov	r5, r3
 80023d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	y_old = newmat(1, 1, data_zero);
 80023e6:	4c15      	ldr	r4, [pc, #84]	; (800243c <setmatrix+0x38c>)
 80023e8:	4638      	mov	r0, r7
 80023ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ee:	2201      	movs	r2, #1
 80023f0:	2101      	movs	r1, #1
 80023f2:	f7fe fd41 	bl	8000e78 <newmat>
 80023f6:	e023      	b.n	8002440 <setmatrix+0x390>
 80023f8:	08006220 	.word	0x08006220
 80023fc:	20000008 	.word	0x20000008
 8002400:	3fe00000 	.word	0x3fe00000
 8002404:	3b5844d0 	.word	0x3b5844d0
 8002408:	20000180 	.word	0x20000180
 800240c:	200001ac 	.word	0x200001ac
 8002410:	200001d8 	.word	0x200001d8
 8002414:	2000025c 	.word	0x2000025c
 8002418:	20000288 	.word	0x20000288
 800241c:	20000204 	.word	0x20000204
 8002420:	200002b4 	.word	0x200002b4
 8002424:	20000230 	.word	0x20000230
 8002428:	20000338 	.word	0x20000338
 800242c:	20000364 	.word	0x20000364
 8002430:	20000390 	.word	0x20000390
 8002434:	200003bc 	.word	0x200003bc
 8002438:	200002e0 	.word	0x200002e0
 800243c:	2000030c 	.word	0x2000030c
 8002440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002448:	461d      	mov	r5, r3
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002452:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800245a:	bf00      	nop
 800245c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002460:	46bd      	mov	sp, r7
 8002462:	bdb0      	pop	{r4, r5, r7, pc}
 8002464:	0000      	movs	r0, r0
	...

08002468 <calPWM>:

void calPWM(){
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
	PWMOut1 = max(0.0, 10000*sin(ang));
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <calPWM+0x128>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f80e 	bl	80004a0 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	ec43 2b10 	vmov	d0, r2, r3
 800248c:	f002 fe70 	bl	8005170 <sin>
 8002490:	ec51 0b10 	vmov	r0, r1, d0
 8002494:	a338      	add	r3, pc, #224	; (adr r3, 8002578 <calPWM+0x110>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe f859 	bl	8000550 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80024a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024ae:	f7fe fadf 	bl	8000a70 <__aeabi_dcmpgt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <calPWM+0x56>
 80024b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024bc:	e001      	b.n	80024c2 <calPWM+0x5a>
 80024be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb05 	bl	8000ad4 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <calPWM+0x12c>)
 80024ce:	6013      	str	r3, [r2, #0]
	PWMOut2 = max(0.0, 10000*sin(ang+M_PI));
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <calPWM+0x128>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ffdd 	bl	80004a0 <__aeabi_f2d>
 80024e6:	a326      	add	r3, pc, #152	; (adr r3, 8002580 <calPWM+0x118>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fd fe7a 	bl	80001e4 <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	ec43 2b17 	vmov	d7, r2, r3
 80024f8:	eeb0 0a47 	vmov.f32	s0, s14
 80024fc:	eef0 0a67 	vmov.f32	s1, s15
 8002500:	f002 fe36 	bl	8005170 <sin>
 8002504:	ec51 0b10 	vmov	r0, r1, d0
 8002508:	a31b      	add	r3, pc, #108	; (adr r3, 8002578 <calPWM+0x110>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f81f 	bl	8000550 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	e9c7 2300 	strd	r2, r3, [r7]
 800251a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002522:	f7fe faa5 	bl	8000a70 <__aeabi_dcmpgt>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <calPWM+0xca>
 800252c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002530:	e001      	b.n	8002536 <calPWM+0xce>
 8002532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe facb 	bl	8000ad4 <__aeabi_d2f>
 800253e:	4603      	mov	r3, r0
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <calPWM+0x130>)
 8002542:	6013      	str	r3, [r2, #0]
	ang += (1.0/100.0)*M_PI;
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <calPWM+0x128>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd ffa9 	bl	80004a0 <__aeabi_f2d>
 800254e:	a30e      	add	r3, pc, #56	; (adr r3, 8002588 <calPWM+0x120>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fd fe46 	bl	80001e4 <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f7fe fab8 	bl	8000ad4 <__aeabi_d2f>
 8002564:	4603      	mov	r3, r0
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <calPWM+0x128>)
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	00000000 	.word	0x00000000
 800257c:	40c38800 	.word	0x40c38800
 8002580:	54442d18 	.word	0x54442d18
 8002584:	400921fb 	.word	0x400921fb
 8002588:	9217271a 	.word	0x9217271a
 800258c:	3fa015bf 	.word	0x3fa015bf
 8002590:	20000174 	.word	0x20000174
 8002594:	20000178 	.word	0x20000178
 8002598:	2000017c 	.word	0x2000017c
 800259c:	00000000 	.word	0x00000000

080025a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		Rads = (TIM1->CNT/3072.0)*(2*M_PI);
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ff51 	bl	800045c <__aeabi_ui2d>
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80025c0:	f7fe f8f0 	bl	80007a4 <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	a308      	add	r3, pc, #32	; (adr r3, 80025f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd ffbd 	bl	8000550 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe fa79 	bl	8000ad4 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80025e6:	6013      	str	r3, [r2, #0]
	}
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	54442d18 	.word	0x54442d18
 80025f4:	401921fb 	.word	0x401921fb
 80025f8:	200000c4 	.word	0x200000c4
 80025fc:	40010000 	.word	0x40010000
 8002600:	40a80000 	.word	0x40a80000
 8002604:	20000150 	.word	0x20000150

08002608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
}
 800260e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002610:	e7fe      	b.n	8002610 <Error_Handler+0x8>
	...

08002614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <HAL_MspInit+0x4c>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_MspInit+0x4c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_MspInit+0x4c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <HAL_MspInit+0x4c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_MspInit+0x4c>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002652:	2007      	movs	r0, #7
 8002654:	f000 fad2 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d134      	bne.n	80026f0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_TIM_Encoder_MspInit+0x98>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_TIM_Encoder_MspInit+0x98>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_TIM_Encoder_MspInit+0x98>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_TIM_Encoder_MspInit+0x98>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a14      	ldr	r2, [pc, #80]	; (80026fc <HAL_TIM_Encoder_MspInit+0x98>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_TIM_Encoder_MspInit+0x98>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4809      	ldr	r0, [pc, #36]	; (8002700 <HAL_TIM_Encoder_MspInit+0x9c>)
 80026dc:	f000 fad0 	bl	8002c80 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	201a      	movs	r0, #26
 80026e6:	f000 fa94 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026ea:	201a      	movs	r0, #26
 80026ec:	f000 faad 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000

08002704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <HAL_TIM_Base_MspInit+0x70>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10e      	bne.n	8002734 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_TIM_Base_MspInit+0x74>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <HAL_TIM_Base_MspInit+0x74>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_TIM_Base_MspInit+0x74>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002732:	e01a      	b.n	800276a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a10      	ldr	r2, [pc, #64]	; (800277c <HAL_TIM_Base_MspInit+0x78>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d115      	bne.n	800276a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_TIM_Base_MspInit+0x74>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <HAL_TIM_Base_MspInit+0x74>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_TIM_Base_MspInit+0x74>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	201e      	movs	r0, #30
 8002760:	f000 fa57 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002764:	201e      	movs	r0, #30
 8002766:	f000 fa70 	bl	8002c4a <HAL_NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40000400 	.word	0x40000400
 8002778:	40023800 	.word	0x40023800
 800277c:	40000800 	.word	0x40000800

08002780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_TIM_MspPostInit+0x68>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d11d      	bne.n	80027de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_TIM_MspPostInit+0x6c>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_TIM_MspPostInit+0x6c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_TIM_MspPostInit+0x6c>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <HAL_TIM_MspPostInit+0x70>)
 80027da:	f000 fa51 	bl	8002c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027de:	bf00      	nop
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_UART_MspInit+0x84>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12b      	bne.n	800286e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_UART_MspInit+0x88>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_UART_MspInit+0x88>)
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_UART_MspInit+0x88>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_UART_MspInit+0x88>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_UART_MspInit+0x88>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_UART_MspInit+0x88>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800284e:	230c      	movs	r3, #12
 8002850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800285e:	2307      	movs	r3, #7
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <HAL_UART_MspInit+0x8c>)
 800286a:	f000 fa09 	bl	8002c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40004400 	.word	0x40004400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <NMI_Handler+0x4>

0800288a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <HardFault_Handler+0x4>

08002890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <MemManage_Handler+0x4>

08002896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <BusFault_Handler+0x4>

0800289c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <UsageFault_Handler+0x4>

080028a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d0:	f000 f8a4 	bl	8002a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80028de:	f001 fb4f 	bl	8003f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000034 	.word	0x20000034

080028ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM4_IRQHandler+0x10>)
 80028f2:	f001 fb45 	bl	8003f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200000c4 	.word	0x200000c4

08002900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <SystemInit+0x20>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <SystemInit+0x20>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800295c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002928:	480d      	ldr	r0, [pc, #52]	; (8002960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800292a:	490e      	ldr	r1, [pc, #56]	; (8002964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800292c:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0b      	ldr	r2, [pc, #44]	; (800296c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002940:	4c0b      	ldr	r4, [pc, #44]	; (8002970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800294e:	f7ff ffd7 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002952:	f002 fbdf 	bl	8005114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002956:	f7fe fd0b 	bl	8001370 <main>
  bx  lr    
 800295a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800295c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002968:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 800296c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002970:	20000418 	.word	0x20000418

08002974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_Init+0x40>)
 8002982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_Init+0x40>)
 800298e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_Init+0x40>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <HAL_Init+0x40>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a0:	2003      	movs	r0, #3
 80029a2:	f000 f92b 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 f808 	bl	80029bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ac:	f7ff fe32 	bl	8002614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00

080029bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x54>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_InitTick+0x58>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f943 	bl	8002c66 <HAL_SYSTICK_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00e      	b.n	8002a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	d80a      	bhi.n	8002a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f0:	2200      	movs	r2, #0
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f000 f90b 	bl	8002c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <HAL_InitTick+0x5c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000000c 	.word	0x2000000c
 8002a14:	20000014 	.word	0x20000014
 8002a18:	20000010 	.word	0x20000010

08002a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x20>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_IncTick+0x24>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_IncTick+0x24>)
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	20000414 	.word	0x20000414

08002a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return uwTick;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_GetTick+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000414 	.word	0x20000414

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	; (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	; (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc8:	d301      	bcc.n	8002bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00f      	b.n	8002bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <SysTick_Config+0x40>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f7ff ff8e 	bl	8002afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <SysTick_Config+0x40>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <SysTick_Config+0x40>)
 8002be8:	2207      	movs	r2, #7
 8002bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff29 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c24:	f7ff ff3e 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff8e 	bl	8002b50 <NVIC_EncodePriority>
 8002c34:	4602      	mov	r2, r0
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff5d 	bl	8002afc <__NVIC_SetPriority>
}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff31 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffa2 	bl	8002bb8 <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e159      	b.n	8002f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 8148 	bne.w	8002f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d130      	bne.n	8002d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d017      	beq.n	8002d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d123      	bne.n	8002dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a2 	beq.w	8002f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	6453      	str	r3, [r2, #68]	; 0x44
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e22:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a49      	ldr	r2, [pc, #292]	; (8002f70 <HAL_GPIO_Init+0x2f0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x202>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_GPIO_Init+0x2f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x1fe>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_GPIO_Init+0x2f8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_GPIO_Init+0x2fc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x1f6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a45      	ldr	r2, [pc, #276]	; (8002f80 <HAL_GPIO_Init+0x300>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x1f2>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e72:	2307      	movs	r3, #7
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e82:	2300      	movs	r3, #0
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e94:	4935      	ldr	r1, [pc, #212]	; (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1a:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_GPIO_Init+0x304>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	f67f aea2 	bls.w	8002c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa4:	e003      	b.n	8002fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e267      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d075      	beq.n	80030c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fda:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b7e      	ldr	r3, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x108>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e242      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x74>
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a75      	ldr	r2, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x98>
 800303a:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6f      	ldr	r2, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6c      	ldr	r2, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003054:	4b69      	ldr	r3, [pc, #420]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a68      	ldr	r2, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a65      	ldr	r2, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fce6 	bl	8002a44 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7ff fce2 	bl	8002a44 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e207      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xc0>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7ff fcd2 	bl	8002a44 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7ff fcce 	bl	8002a44 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1f3      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0xe8>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d116      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1c7      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4937      	ldr	r1, [pc, #220]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	e03a      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x244>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7ff fc87 	bl	8002a44 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313a:	f7ff fc83 	bl	8002a44 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1a8      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e015      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x244>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7ff fc66 	bl	8002a44 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317c:	f7ff fc62 	bl	8002a44 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e187      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d036      	beq.n	8003214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_RCC_OscConfig+0x248>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7ff fc46 	bl	8002a44 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031bc:	f7ff fc42 	bl	8002a44 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e167      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_OscConfig+0x240>)
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x200>
 80031da:	e01b      	b.n	8003214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x248>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7ff fc2f 	bl	8002a44 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	e00e      	b.n	8003208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ea:	f7ff fc2b 	bl	8002a44 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d907      	bls.n	8003208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e150      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
 80031fc:	40023800 	.word	0x40023800
 8003200:	42470000 	.word	0x42470000
 8003204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ea      	bne.n	80031ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8097 	beq.w	8003350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003226:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b7d      	ldr	r3, [pc, #500]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a7c      	ldr	r2, [pc, #496]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b7a      	ldr	r3, [pc, #488]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b77      	ldr	r3, [pc, #476]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325e:	4b74      	ldr	r3, [pc, #464]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a73      	ldr	r2, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7ff fbeb 	bl	8002a44 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7ff fbe7 	bl	8002a44 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e10c      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_OscConfig+0x474>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x2ea>
 8003298:	4b64      	ldr	r3, [pc, #400]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	e01c      	b.n	80032e0 <HAL_RCC_OscConfig+0x324>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x30c>
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5b      	ldr	r2, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0x324>
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	4b55      	ldr	r3, [pc, #340]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7ff fbac 	bl	8002a44 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7ff fba8 	bl	8002a44 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0cb      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	4b49      	ldr	r3, [pc, #292]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ee      	beq.n	80032f0 <HAL_RCC_OscConfig+0x334>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7ff fb96 	bl	8002a44 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7ff fb92 	bl	8002a44 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0b5      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ee      	bne.n	800331c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b39      	ldr	r3, [pc, #228]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a38      	ldr	r2, [pc, #224]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a1 	beq.w	800349c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_OscConfig+0x470>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d05c      	beq.n	8003420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d141      	bne.n	80033f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff fb66 	bl	8002a44 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7ff fb62 	bl	8002a44 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e087      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	019b      	lsls	r3, r3, #6
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	491b      	ldr	r1, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7ff fb3b 	bl	8002a44 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7ff fb37 	bl	8002a44 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e05c      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_OscConfig+0x470>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x416>
 80033f0:	e054      	b.n	800349c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff fb24 	bl	8002a44 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7ff fb20 	bl	8002a44 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e045      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x444>
 800341e:	e03d      	b.n	800349c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e038      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000
 8003434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x4ec>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d028      	beq.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d121      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d11a      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800346e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003470:	4293      	cmp	r3, r2
 8003472:	d111      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	3b01      	subs	r3, #1
 8003482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0cc      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d90c      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d044      	beq.n	80035cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d119      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d003      	beq.n	800356a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e067      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4934      	ldr	r1, [pc, #208]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800359c:	f7ff fa52 	bl	8002a44 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7ff fa4e 	bl	8002a44 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e04f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d20c      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff f9b2 	bl	80029bc <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023c00 	.word	0x40023c00
 8003668:	40023800 	.word	0x40023800
 800366c:	08006244 	.word	0x08006244
 8003670:	2000000c 	.word	0x2000000c
 8003674:	20000010 	.word	0x20000010

08003678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b094      	sub	sp, #80	; 0x50
 800367e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
 8003684:	2300      	movs	r3, #0
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	2300      	movs	r3, #0
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003690:	4b79      	ldr	r3, [pc, #484]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d00d      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x40>
 800369c:	2b08      	cmp	r3, #8
 800369e:	f200 80e1 	bhi.w	8003864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x34>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036aa:	e0db      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b73      	ldr	r3, [pc, #460]	; (800387c <HAL_RCC_GetSysClockFreq+0x204>)
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036b0:	e0db      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b73      	ldr	r3, [pc, #460]	; (8003880 <HAL_RCC_GetSysClockFreq+0x208>)
 80036b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b6:	e0d8      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c2:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	2200      	movs	r2, #0
 80036d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
 80036e2:	2300      	movs	r3, #0
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
 80036e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4621      	mov	r1, r4
 8003704:	1a51      	subs	r1, r2, r1
 8003706:	6139      	str	r1, [r7, #16]
 8003708:	4629      	mov	r1, r5
 800370a:	eb63 0301 	sbc.w	r3, r3, r1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800371c:	4659      	mov	r1, fp
 800371e:	018b      	lsls	r3, r1, #6
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003726:	4651      	mov	r1, sl
 8003728:	018a      	lsls	r2, r1, #6
 800372a:	4651      	mov	r1, sl
 800372c:	ebb2 0801 	subs.w	r8, r2, r1
 8003730:	4659      	mov	r1, fp
 8003732:	eb63 0901 	sbc.w	r9, r3, r1
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800374a:	4690      	mov	r8, r2
 800374c:	4699      	mov	r9, r3
 800374e:	4623      	mov	r3, r4
 8003750:	eb18 0303 	adds.w	r3, r8, r3
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	462b      	mov	r3, r5
 8003758:	eb49 0303 	adc.w	r3, r9, r3
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800376a:	4629      	mov	r1, r5
 800376c:	024b      	lsls	r3, r1, #9
 800376e:	4621      	mov	r1, r4
 8003770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003774:	4621      	mov	r1, r4
 8003776:	024a      	lsls	r2, r1, #9
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	2200      	movs	r2, #0
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
 8003782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003788:	f7fd f9f4 	bl	8000b74 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003794:	e058      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003796:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	2200      	movs	r2, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	4611      	mov	r1, r2
 80037a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	f04f 0000 	mov.w	r0, #0
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	0159      	lsls	r1, r3, #5
 80037be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c2:	0150      	lsls	r0, r2, #5
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4641      	mov	r1, r8
 80037ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037e8:	ebb2 040a 	subs.w	r4, r2, sl
 80037ec:	eb63 050b 	sbc.w	r5, r3, fp
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	00eb      	lsls	r3, r5, #3
 80037fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fe:	00e2      	lsls	r2, r4, #3
 8003800:	4614      	mov	r4, r2
 8003802:	461d      	mov	r5, r3
 8003804:	4643      	mov	r3, r8
 8003806:	18e3      	adds	r3, r4, r3
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	464b      	mov	r3, r9
 800380c:	eb45 0303 	adc.w	r3, r5, r3
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800381e:	4629      	mov	r1, r5
 8003820:	028b      	lsls	r3, r1, #10
 8003822:	4621      	mov	r1, r4
 8003824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003828:	4621      	mov	r1, r4
 800382a:	028a      	lsls	r2, r1, #10
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003832:	2200      	movs	r2, #0
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	61fa      	str	r2, [r7, #28]
 8003838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800383c:	f7fd f99a 	bl	8000b74 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_GetSysClockFreq+0x200>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	3301      	adds	r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800385a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003862:	e002      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_GetSysClockFreq+0x204>)
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800386c:	4618      	mov	r0, r3
 800386e:	3750      	adds	r7, #80	; 0x50
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	00f42400 	.word	0x00f42400
 8003880:	007a1200 	.word	0x007a1200

08003884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_GetHCLKFreq+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	2000000c 	.word	0x2000000c

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff0 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0a9b      	lsrs	r3, r3, #10
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4903      	ldr	r1, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08006254 	.word	0x08006254

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c8:	f7ff ffdc 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0b5b      	lsrs	r3, r3, #13
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	08006254 	.word	0x08006254

080038ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e041      	b.n	8003982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fe fef6 	bl	8002704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f000 fde2 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	d001      	beq.n	80039a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e03c      	b.n	8003a1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_TIM_Base_Start+0xa0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_TIM_Base_Start+0x5c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d013      	beq.n	80039e8 <HAL_TIM_Base_Start+0x5c>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_TIM_Base_Start+0xa4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_Base_Start+0x5c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_TIM_Base_Start+0xa8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIM_Base_Start+0x5c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_TIM_Base_Start+0xac>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_Base_Start+0x5c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIM_Base_Start+0xb0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d010      	beq.n	8003a1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e007      	b.n	8003a1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40014000 	.word	0x40014000

08003a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d001      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e044      	b.n	8003ae2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x6c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a82:	d013      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x6c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x6c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x6c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_TIM_Base_Start_IT+0xbc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x6c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d111      	bne.n	8003ad0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d010      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	e007      	b.n	8003ae0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40014000 	.word	0x40014000

08003b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e041      	b.n	8003b9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f839 	bl	8003ba2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 fcd6 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_TIM_PWM_Start+0x24>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e022      	b.n	8003c22 <HAL_TIM_PWM_Start+0x6a>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d109      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0x3e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e015      	b.n	8003c22 <HAL_TIM_PWM_Start+0x6a>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d109      	bne.n	8003c10 <HAL_TIM_PWM_Start+0x58>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e008      	b.n	8003c22 <HAL_TIM_PWM_Start+0x6a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e068      	b.n	8003cfc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x82>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c38:	e013      	b.n	8003c62 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x92>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c48:	e00b      	b.n	8003c62 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xa2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	e003      	b.n	8003c62 <HAL_TIM_PWM_Start+0xaa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	6839      	ldr	r1, [r7, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fee8 	bl	8004a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a23      	ldr	r2, [pc, #140]	; (8003d04 <HAL_TIM_PWM_Start+0x14c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_TIM_PWM_Start+0x14c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x10e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d013      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x10e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_TIM_PWM_Start+0x150>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x10e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <HAL_TIM_PWM_Start+0x154>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x10e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_TIM_PWM_Start+0x158>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x10e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <HAL_TIM_PWM_Start+0x15c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d111      	bne.n	8003cea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d010      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	e007      	b.n	8003cfa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40010000 	.word	0x40010000
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40014000 	.word	0x40014000

08003d18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e097      	b.n	8003e5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe fc8f 	bl	8002664 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d5c:	f023 0307 	bic.w	r3, r3, #7
 8003d60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fbc1 	bl	80044f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	4313      	orrs	r3, r2
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003db8:	f023 030c 	bic.w	r3, r3, #12
 8003dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	011a      	lsls	r2, r3, #4
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	4313      	orrs	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d110      	bne.n	8003eb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e9a:	7b7b      	ldrb	r3, [r7, #13]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e069      	b.n	8003f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb4:	e031      	b.n	8003f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d110      	bne.n	8003ede <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ebc:	7bbb      	ldrb	r3, [r7, #14]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ec2:	7b3b      	ldrb	r3, [r7, #12]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e055      	b.n	8003f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003edc:	e01d      	b.n	8003f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eea:	7b7b      	ldrb	r3, [r7, #13]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef0:	7b3b      	ldrb	r3, [r7, #12]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d001      	beq.n	8003efa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e03e      	b.n	8003f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_TIM_Encoder_Start+0xc4>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d008      	beq.n	8003f38 <HAL_TIM_Encoder_Start+0xd4>
 8003f26:	e00f      	b.n	8003f48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fd85 	bl	8004a40 <TIM_CCxChannelCmd>
      break;
 8003f36:	e016      	b.n	8003f66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2104      	movs	r1, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fd7d 	bl	8004a40 <TIM_CCxChannelCmd>
      break;
 8003f46:	e00e      	b.n	8003f66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fd75 	bl	8004a40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fd6e 	bl	8004a40 <TIM_CCxChannelCmd>
      break;
 8003f64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d122      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d11b      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0202 	mvn.w	r2, #2
 8003fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fa77 	bl	80044b6 <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa69 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa7a 	bl	80044ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0204 	mvn.w	r2, #4
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa4d 	bl	80044b6 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa3f 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fa50 	bl	80044ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b08      	cmp	r3, #8
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0208 	mvn.w	r2, #8
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa23 	bl	80044b6 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa15 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa26 	bl	80044ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b10      	cmp	r3, #16
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b10      	cmp	r3, #16
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0210 	mvn.w	r2, #16
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2208      	movs	r2, #8
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f9f9 	bl	80044b6 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f9eb 	bl	80044a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9fc 	bl	80044ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10e      	bne.n	8004104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d107      	bne.n	8004104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0201 	mvn.w	r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fe fa4e 	bl	80025a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b80      	cmp	r3, #128	; 0x80
 8004110:	d10e      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d107      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fd26 	bl	8004b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9c1 	bl	80044de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b20      	cmp	r3, #32
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b20      	cmp	r3, #32
 8004176:	d107      	bne.n	8004188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0220 	mvn.w	r2, #32
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fcf0 	bl	8004b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0ae      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	f200 809f 	bhi.w	80042fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	080042fd 	.word	0x080042fd
 80041cc:	080042fd 	.word	0x080042fd
 80041d0:	080042fd 	.word	0x080042fd
 80041d4:	08004239 	.word	0x08004239
 80041d8:	080042fd 	.word	0x080042fd
 80041dc:	080042fd 	.word	0x080042fd
 80041e0:	080042fd 	.word	0x080042fd
 80041e4:	0800427b 	.word	0x0800427b
 80041e8:	080042fd 	.word	0x080042fd
 80041ec:	080042fd 	.word	0x080042fd
 80041f0:	080042fd 	.word	0x080042fd
 80041f4:	080042bb 	.word	0x080042bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f9f8 	bl	80045f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0208 	orr.w	r2, r2, #8
 8004212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	619a      	str	r2, [r3, #24]
      break;
 8004236:	e064      	b.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fa3e 	bl	80046c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6999      	ldr	r1, [r3, #24]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	619a      	str	r2, [r3, #24]
      break;
 8004278:	e043      	b.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fa89 	bl	8004798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0208 	orr.w	r2, r2, #8
 8004294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0204 	bic.w	r2, r2, #4
 80042a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69d9      	ldr	r1, [r3, #28]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	61da      	str	r2, [r3, #28]
      break;
 80042b8:	e023      	b.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fad3 	bl	800486c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69d9      	ldr	r1, [r3, #28]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	021a      	lsls	r2, r3, #8
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	61da      	str	r2, [r3, #28]
      break;
 80042fa:	e002      	b.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430a:	7dfb      	ldrb	r3, [r7, #23]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIM_ConfigClockSource+0x1c>
 800432c:	2302      	movs	r3, #2
 800432e:	e0b4      	b.n	800449a <HAL_TIM_ConfigClockSource+0x186>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800434e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004368:	d03e      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0xd4>
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	f200 8087 	bhi.w	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	f000 8086 	beq.w	8004486 <HAL_TIM_ConfigClockSource+0x172>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	d87f      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b70      	cmp	r3, #112	; 0x70
 8004382:	d01a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0xa6>
 8004384:	2b70      	cmp	r3, #112	; 0x70
 8004386:	d87b      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b60      	cmp	r3, #96	; 0x60
 800438a:	d050      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x11a>
 800438c:	2b60      	cmp	r3, #96	; 0x60
 800438e:	d877      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b50      	cmp	r3, #80	; 0x50
 8004392:	d03c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0xfa>
 8004394:	2b50      	cmp	r3, #80	; 0x50
 8004396:	d873      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d058      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x13a>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d86f      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b30      	cmp	r3, #48	; 0x30
 80043a2:	d064      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d86b      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d060      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d867      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d05c      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d05a      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x15a>
 80043b8:	e062      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f000 fb19 	bl	8004a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	609a      	str	r2, [r3, #8]
      break;
 80043e6:	e04f      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6899      	ldr	r1, [r3, #8]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f000 fb02 	bl	8004a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800440a:	609a      	str	r2, [r3, #8]
      break;
 800440c:	e03c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 fa76 	bl	800490c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2150      	movs	r1, #80	; 0x50
 8004426:	4618      	mov	r0, r3
 8004428:	f000 facf 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 800442c:	e02c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 fa95 	bl	800496a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2160      	movs	r1, #96	; 0x60
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fabf 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 800444c:	e01c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	461a      	mov	r2, r3
 800445c:	f000 fa56 	bl	800490c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2140      	movs	r1, #64	; 0x40
 8004466:	4618      	mov	r0, r3
 8004468:	f000 faaf 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 800446c:	e00c      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 faa6 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 800447e:	e003      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e000      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <TIM_Base_SetConfig+0xe4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00f      	beq.n	800452c <TIM_Base_SetConfig+0x38>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0x38>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a31      	ldr	r2, [pc, #196]	; (80045dc <TIM_Base_SetConfig+0xe8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0x38>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a30      	ldr	r2, [pc, #192]	; (80045e0 <TIM_Base_SetConfig+0xec>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0x38>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <TIM_Base_SetConfig+0xf0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d108      	bne.n	800453e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <TIM_Base_SetConfig+0xe4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01b      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d017      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <TIM_Base_SetConfig+0xe8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <TIM_Base_SetConfig+0xec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00f      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <TIM_Base_SetConfig+0xf0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <TIM_Base_SetConfig+0xf4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <TIM_Base_SetConfig+0xf8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <TIM_Base_SetConfig+0xfc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <TIM_Base_SetConfig+0xe4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800

080045f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 0302 	bic.w	r3, r3, #2
 800463c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <TIM_OC1_SetConfig+0xc8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10c      	bne.n	800466a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0308 	bic.w	r3, r3, #8
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <TIM_OC1_SetConfig+0xc8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d111      	bne.n	8004696 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40010000 	.word	0x40010000

080046c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0320 	bic.w	r3, r3, #32
 800470a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <TIM_OC2_SetConfig+0xd4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10d      	bne.n	800473c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <TIM_OC2_SetConfig+0xd4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d113      	bne.n	800476c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000

08004798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <TIM_OC3_SetConfig+0xd0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10d      	bne.n	8004812 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a14      	ldr	r2, [pc, #80]	; (8004868 <TIM_OC3_SetConfig+0xd0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d113      	bne.n	8004842 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	40010000 	.word	0x40010000

0800486c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a10      	ldr	r2, [pc, #64]	; (8004908 <TIM_OC4_SetConfig+0x9c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d109      	bne.n	80048e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	019b      	lsls	r3, r3, #6
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000

0800490c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 030a 	bic.w	r3, r3, #10
 8004948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0210 	bic.w	r2, r3, #16
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	031b      	lsls	r3, r3, #12
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2201      	movs	r2, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e050      	b.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d018      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af0:	d013      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00e      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d009      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d10c      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40014000 	.word	0x40014000

08004b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e03f      	b.n	8004c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fe1c 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2224      	movs	r2, #36	; 0x24
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f829 	bl	8004c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b0c0      	sub	sp, #256	; 0x100
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	68d9      	ldr	r1, [r3, #12]
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	ea40 0301 	orr.w	r3, r0, r1
 8004c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c84:	f021 010c 	bic.w	r1, r1, #12
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c92:	430b      	orrs	r3, r1
 8004c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca6:	6999      	ldr	r1, [r3, #24]
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	ea40 0301 	orr.w	r3, r0, r1
 8004cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b8f      	ldr	r3, [pc, #572]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d005      	beq.n	8004ccc <UART_SetConfig+0xa0>
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <UART_SetConfig+0x2d0>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d104      	bne.n	8004cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ccc:	f7fe fdfa 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cd4:	e003      	b.n	8004cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f7fe fde1 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	f040 810c 	bne.w	8004f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	1891      	adds	r1, r2, r2
 8004d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d06:	415b      	adcs	r3, r3
 8004d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d0e:	4621      	mov	r1, r4
 8004d10:	eb12 0801 	adds.w	r8, r2, r1
 8004d14:	4629      	mov	r1, r5
 8004d16:	eb43 0901 	adc.w	r9, r3, r1
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d2e:	4690      	mov	r8, r2
 8004d30:	4699      	mov	r9, r3
 8004d32:	4623      	mov	r3, r4
 8004d34:	eb18 0303 	adds.w	r3, r8, r3
 8004d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	eb49 0303 	adc.w	r3, r9, r3
 8004d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	18db      	adds	r3, r3, r3
 8004d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d60:	4613      	mov	r3, r2
 8004d62:	eb42 0303 	adc.w	r3, r2, r3
 8004d66:	657b      	str	r3, [r7, #84]	; 0x54
 8004d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d70:	f7fb ff00 	bl	8000b74 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4b61      	ldr	r3, [pc, #388]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	011c      	lsls	r4, r3, #4
 8004d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004da4:	4641      	mov	r1, r8
 8004da6:	eb12 0a01 	adds.w	sl, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb43 0b01 	adc.w	fp, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc4:	4692      	mov	sl, r2
 8004dc6:	469b      	mov	fp, r3
 8004dc8:	4643      	mov	r3, r8
 8004dca:	eb1a 0303 	adds.w	r3, sl, r3
 8004dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004df0:	460b      	mov	r3, r1
 8004df2:	18db      	adds	r3, r3, r3
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
 8004df6:	4613      	mov	r3, r2
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e06:	f7fb feb5 	bl	8000b74 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004e12:	fba3 2301 	umull	r2, r3, r3, r1
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2264      	movs	r2, #100	; 0x64
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	1acb      	subs	r3, r1, r3
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e26:	4b36      	ldr	r3, [pc, #216]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004e28:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e34:	441c      	add	r4, r3
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e50:	415b      	adcs	r3, r3
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e58:	4641      	mov	r1, r8
 8004e5a:	1851      	adds	r1, r2, r1
 8004e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e5e:	4649      	mov	r1, r9
 8004e60:	414b      	adcs	r3, r1
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e70:	4659      	mov	r1, fp
 8004e72:	00cb      	lsls	r3, r1, #3
 8004e74:	4651      	mov	r1, sl
 8004e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	00ca      	lsls	r2, r1, #3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	4642      	mov	r2, r8
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	460a      	mov	r2, r1
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004eac:	460b      	mov	r3, r1
 8004eae:	18db      	adds	r3, r3, r3
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ec2:	f7fb fe57 	bl	8000b74 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2164      	movs	r1, #100	; 0x64
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	3332      	adds	r3, #50	; 0x32
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 0207 	and.w	r2, r3, #7
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4422      	add	r2, r4
 8004ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ef4:	e105      	b.n	8005102 <UART_SetConfig+0x4d6>
 8004ef6:	bf00      	nop
 8004ef8:	40011000 	.word	0x40011000
 8004efc:	40011400 	.word	0x40011400
 8004f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f16:	4642      	mov	r2, r8
 8004f18:	464b      	mov	r3, r9
 8004f1a:	1891      	adds	r1, r2, r2
 8004f1c:	6239      	str	r1, [r7, #32]
 8004f1e:	415b      	adcs	r3, r3
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f26:	4641      	mov	r1, r8
 8004f28:	1854      	adds	r4, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0501 	adc.w	r5, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	00eb      	lsls	r3, r5, #3
 8004f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f3e:	00e2      	lsls	r2, r4, #3
 8004f40:	4614      	mov	r4, r2
 8004f42:	461d      	mov	r5, r3
 8004f44:	4643      	mov	r3, r8
 8004f46:	18e3      	adds	r3, r4, r3
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	eb45 0303 	adc.w	r3, r5, r3
 8004f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f72:	4629      	mov	r1, r5
 8004f74:	008b      	lsls	r3, r1, #2
 8004f76:	4621      	mov	r1, r4
 8004f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	008a      	lsls	r2, r1, #2
 8004f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f84:	f7fb fdf6 	bl	8000b74 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4b60      	ldr	r3, [pc, #384]	; (8005110 <UART_SetConfig+0x4e4>)
 8004f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	011c      	lsls	r4, r3, #4
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	61b9      	str	r1, [r7, #24]
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb8:	4641      	mov	r1, r8
 8004fba:	1851      	adds	r1, r2, r1
 8004fbc:	6139      	str	r1, [r7, #16]
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	414b      	adcs	r3, r1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd0:	4659      	mov	r1, fp
 8004fd2:	00cb      	lsls	r3, r1, #3
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fda:	4651      	mov	r1, sl
 8004fdc:	00ca      	lsls	r2, r1, #3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fec:	464b      	mov	r3, r9
 8004fee:	460a      	mov	r2, r1
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	67bb      	str	r3, [r7, #120]	; 0x78
 8005002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005010:	4649      	mov	r1, r9
 8005012:	008b      	lsls	r3, r1, #2
 8005014:	4641      	mov	r1, r8
 8005016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501a:	4641      	mov	r1, r8
 800501c:	008a      	lsls	r2, r1, #2
 800501e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005022:	f7fb fda7 	bl	8000b74 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4b39      	ldr	r3, [pc, #228]	; (8005110 <UART_SetConfig+0x4e4>)
 800502c:	fba3 1302 	umull	r1, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	2164      	movs	r1, #100	; 0x64
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	3332      	adds	r3, #50	; 0x32
 800503e:	4a34      	ldr	r2, [pc, #208]	; (8005110 <UART_SetConfig+0x4e4>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504a:	441c      	add	r4, r3
 800504c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005050:	2200      	movs	r2, #0
 8005052:	673b      	str	r3, [r7, #112]	; 0x70
 8005054:	677a      	str	r2, [r7, #116]	; 0x74
 8005056:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800505a:	4642      	mov	r2, r8
 800505c:	464b      	mov	r3, r9
 800505e:	1891      	adds	r1, r2, r2
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	415b      	adcs	r3, r3
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800506a:	4641      	mov	r1, r8
 800506c:	1851      	adds	r1, r2, r1
 800506e:	6039      	str	r1, [r7, #0]
 8005070:	4649      	mov	r1, r9
 8005072:	414b      	adcs	r3, r1
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005082:	4659      	mov	r1, fp
 8005084:	00cb      	lsls	r3, r1, #3
 8005086:	4651      	mov	r1, sl
 8005088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508c:	4651      	mov	r1, sl
 800508e:	00ca      	lsls	r2, r1, #3
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	4603      	mov	r3, r0
 8005096:	4642      	mov	r2, r8
 8005098:	189b      	adds	r3, r3, r2
 800509a:	66bb      	str	r3, [r7, #104]	; 0x68
 800509c:	464b      	mov	r3, r9
 800509e:	460a      	mov	r2, r1
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	663b      	str	r3, [r7, #96]	; 0x60
 80050b0:	667a      	str	r2, [r7, #100]	; 0x64
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050be:	4649      	mov	r1, r9
 80050c0:	008b      	lsls	r3, r1, #2
 80050c2:	4641      	mov	r1, r8
 80050c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050c8:	4641      	mov	r1, r8
 80050ca:	008a      	lsls	r2, r1, #2
 80050cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050d0:	f7fb fd50 	bl	8000b74 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <UART_SetConfig+0x4e4>)
 80050da:	fba3 1302 	umull	r1, r3, r3, r2
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	2164      	movs	r1, #100	; 0x64
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	3332      	adds	r3, #50	; 0x32
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <UART_SetConfig+0x4e4>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4422      	add	r2, r4
 8005100:	609a      	str	r2, [r3, #8]
}
 8005102:	bf00      	nop
 8005104:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005108:	46bd      	mov	sp, r7
 800510a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800510e:	bf00      	nop
 8005110:	51eb851f 	.word	0x51eb851f

08005114 <__libc_init_array>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	4d0d      	ldr	r5, [pc, #52]	; (800514c <__libc_init_array+0x38>)
 8005118:	4c0d      	ldr	r4, [pc, #52]	; (8005150 <__libc_init_array+0x3c>)
 800511a:	1b64      	subs	r4, r4, r5
 800511c:	10a4      	asrs	r4, r4, #2
 800511e:	2600      	movs	r6, #0
 8005120:	42a6      	cmp	r6, r4
 8005122:	d109      	bne.n	8005138 <__libc_init_array+0x24>
 8005124:	4d0b      	ldr	r5, [pc, #44]	; (8005154 <__libc_init_array+0x40>)
 8005126:	4c0c      	ldr	r4, [pc, #48]	; (8005158 <__libc_init_array+0x44>)
 8005128:	f001 f86c 	bl	8006204 <_init>
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	2600      	movs	r6, #0
 8005132:	42a6      	cmp	r6, r4
 8005134:	d105      	bne.n	8005142 <__libc_init_array+0x2e>
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	f855 3b04 	ldr.w	r3, [r5], #4
 800513c:	4798      	blx	r3
 800513e:	3601      	adds	r6, #1
 8005140:	e7ee      	b.n	8005120 <__libc_init_array+0xc>
 8005142:	f855 3b04 	ldr.w	r3, [r5], #4
 8005146:	4798      	blx	r3
 8005148:	3601      	adds	r6, #1
 800514a:	e7f2      	b.n	8005132 <__libc_init_array+0x1e>
 800514c:	08006440 	.word	0x08006440
 8005150:	08006440 	.word	0x08006440
 8005154:	08006440 	.word	0x08006440
 8005158:	08006444 	.word	0x08006444

0800515c <memset>:
 800515c:	4402      	add	r2, r0
 800515e:	4603      	mov	r3, r0
 8005160:	4293      	cmp	r3, r2
 8005162:	d100      	bne.n	8005166 <memset+0xa>
 8005164:	4770      	bx	lr
 8005166:	f803 1b01 	strb.w	r1, [r3], #1
 800516a:	e7f9      	b.n	8005160 <memset+0x4>
 800516c:	0000      	movs	r0, r0
	...

08005170 <sin>:
 8005170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005172:	ec53 2b10 	vmov	r2, r3, d0
 8005176:	4828      	ldr	r0, [pc, #160]	; (8005218 <sin+0xa8>)
 8005178:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800517c:	4281      	cmp	r1, r0
 800517e:	dc07      	bgt.n	8005190 <sin+0x20>
 8005180:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005210 <sin+0xa0>
 8005184:	2000      	movs	r0, #0
 8005186:	b005      	add	sp, #20
 8005188:	f85d eb04 	ldr.w	lr, [sp], #4
 800518c:	f000 be6c 	b.w	8005e68 <__kernel_sin>
 8005190:	4822      	ldr	r0, [pc, #136]	; (800521c <sin+0xac>)
 8005192:	4281      	cmp	r1, r0
 8005194:	dd09      	ble.n	80051aa <sin+0x3a>
 8005196:	ee10 0a10 	vmov	r0, s0
 800519a:	4619      	mov	r1, r3
 800519c:	f7fb f820 	bl	80001e0 <__aeabi_dsub>
 80051a0:	ec41 0b10 	vmov	d0, r0, r1
 80051a4:	b005      	add	sp, #20
 80051a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80051aa:	4668      	mov	r0, sp
 80051ac:	f000 f838 	bl	8005220 <__ieee754_rem_pio2>
 80051b0:	f000 0003 	and.w	r0, r0, #3
 80051b4:	2801      	cmp	r0, #1
 80051b6:	d00c      	beq.n	80051d2 <sin+0x62>
 80051b8:	2802      	cmp	r0, #2
 80051ba:	d011      	beq.n	80051e0 <sin+0x70>
 80051bc:	b9f0      	cbnz	r0, 80051fc <sin+0x8c>
 80051be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051c2:	ed9d 0b00 	vldr	d0, [sp]
 80051c6:	2001      	movs	r0, #1
 80051c8:	f000 fe4e 	bl	8005e68 <__kernel_sin>
 80051cc:	ec51 0b10 	vmov	r0, r1, d0
 80051d0:	e7e6      	b.n	80051a0 <sin+0x30>
 80051d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051d6:	ed9d 0b00 	vldr	d0, [sp]
 80051da:	f000 fa2d 	bl	8005638 <__kernel_cos>
 80051de:	e7f5      	b.n	80051cc <sin+0x5c>
 80051e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051e4:	ed9d 0b00 	vldr	d0, [sp]
 80051e8:	2001      	movs	r0, #1
 80051ea:	f000 fe3d 	bl	8005e68 <__kernel_sin>
 80051ee:	ec53 2b10 	vmov	r2, r3, d0
 80051f2:	ee10 0a10 	vmov	r0, s0
 80051f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051fa:	e7d1      	b.n	80051a0 <sin+0x30>
 80051fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005200:	ed9d 0b00 	vldr	d0, [sp]
 8005204:	f000 fa18 	bl	8005638 <__kernel_cos>
 8005208:	e7f1      	b.n	80051ee <sin+0x7e>
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w
	...
 8005218:	3fe921fb 	.word	0x3fe921fb
 800521c:	7fefffff 	.word	0x7fefffff

08005220 <__ieee754_rem_pio2>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	ed2d 8b02 	vpush	{d8}
 8005228:	ec55 4b10 	vmov	r4, r5, d0
 800522c:	4bca      	ldr	r3, [pc, #808]	; (8005558 <__ieee754_rem_pio2+0x338>)
 800522e:	b08b      	sub	sp, #44	; 0x2c
 8005230:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005234:	4598      	cmp	r8, r3
 8005236:	4682      	mov	sl, r0
 8005238:	9502      	str	r5, [sp, #8]
 800523a:	dc08      	bgt.n	800524e <__ieee754_rem_pio2+0x2e>
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	ed80 0b00 	vstr	d0, [r0]
 8005244:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005248:	f04f 0b00 	mov.w	fp, #0
 800524c:	e028      	b.n	80052a0 <__ieee754_rem_pio2+0x80>
 800524e:	4bc3      	ldr	r3, [pc, #780]	; (800555c <__ieee754_rem_pio2+0x33c>)
 8005250:	4598      	cmp	r8, r3
 8005252:	dc78      	bgt.n	8005346 <__ieee754_rem_pio2+0x126>
 8005254:	9b02      	ldr	r3, [sp, #8]
 8005256:	4ec2      	ldr	r6, [pc, #776]	; (8005560 <__ieee754_rem_pio2+0x340>)
 8005258:	2b00      	cmp	r3, #0
 800525a:	ee10 0a10 	vmov	r0, s0
 800525e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005520 <__ieee754_rem_pio2+0x300>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	4629      	mov	r1, r5
 8005266:	dd39      	ble.n	80052dc <__ieee754_rem_pio2+0xbc>
 8005268:	f7fa ffba 	bl	80001e0 <__aeabi_dsub>
 800526c:	45b0      	cmp	r8, r6
 800526e:	4604      	mov	r4, r0
 8005270:	460d      	mov	r5, r1
 8005272:	d01b      	beq.n	80052ac <__ieee754_rem_pio2+0x8c>
 8005274:	a3ac      	add	r3, pc, #688	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fa ffb1 	bl	80001e0 <__aeabi_dsub>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	e9ca 2300 	strd	r2, r3, [sl]
 8005286:	4620      	mov	r0, r4
 8005288:	4629      	mov	r1, r5
 800528a:	f7fa ffa9 	bl	80001e0 <__aeabi_dsub>
 800528e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f7fa ffa4 	bl	80001e0 <__aeabi_dsub>
 8005298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800529c:	f04f 0b01 	mov.w	fp, #1
 80052a0:	4658      	mov	r0, fp
 80052a2:	b00b      	add	sp, #44	; 0x2c
 80052a4:	ecbd 8b02 	vpop	{d8}
 80052a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8005530 <__ieee754_rem_pio2+0x310>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f7fa ff95 	bl	80001e0 <__aeabi_dsub>
 80052b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	f7fa ff8e 	bl	80001e0 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	e9ca 2300 	strd	r2, r3, [sl]
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fa ff86 	bl	80001e0 <__aeabi_dsub>
 80052d4:	a398      	add	r3, pc, #608	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	e7db      	b.n	8005294 <__ieee754_rem_pio2+0x74>
 80052dc:	f7fa ff82 	bl	80001e4 <__adddf3>
 80052e0:	45b0      	cmp	r8, r6
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	d016      	beq.n	8005316 <__ieee754_rem_pio2+0xf6>
 80052e8:	a38f      	add	r3, pc, #572	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fa ff79 	bl	80001e4 <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	e9ca 2300 	strd	r2, r3, [sl]
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	f7fa ff6f 	bl	80001e0 <__aeabi_dsub>
 8005302:	a389      	add	r3, pc, #548	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ff6c 	bl	80001e4 <__adddf3>
 800530c:	f04f 3bff 	mov.w	fp, #4294967295
 8005310:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005314:	e7c4      	b.n	80052a0 <__ieee754_rem_pio2+0x80>
 8005316:	a386      	add	r3, pc, #536	; (adr r3, 8005530 <__ieee754_rem_pio2+0x310>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f7fa ff62 	bl	80001e4 <__adddf3>
 8005320:	a385      	add	r3, pc, #532	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	4604      	mov	r4, r0
 8005328:	460d      	mov	r5, r1
 800532a:	f7fa ff5b 	bl	80001e4 <__adddf3>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	e9ca 2300 	strd	r2, r3, [sl]
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ff51 	bl	80001e0 <__aeabi_dsub>
 800533e:	a37e      	add	r3, pc, #504	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	e7e0      	b.n	8005308 <__ieee754_rem_pio2+0xe8>
 8005346:	4b87      	ldr	r3, [pc, #540]	; (8005564 <__ieee754_rem_pio2+0x344>)
 8005348:	4598      	cmp	r8, r3
 800534a:	f300 80d9 	bgt.w	8005500 <__ieee754_rem_pio2+0x2e0>
 800534e:	f000 fe49 	bl	8005fe4 <fabs>
 8005352:	ec55 4b10 	vmov	r4, r5, d0
 8005356:	ee10 0a10 	vmov	r0, s0
 800535a:	a379      	add	r3, pc, #484	; (adr r3, 8005540 <__ieee754_rem_pio2+0x320>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb f8f5 	bl	8000550 <__aeabi_dmul>
 8005366:	4b80      	ldr	r3, [pc, #512]	; (8005568 <__ieee754_rem_pio2+0x348>)
 8005368:	2200      	movs	r2, #0
 800536a:	f7fa ff3b 	bl	80001e4 <__adddf3>
 800536e:	f7fb fb89 	bl	8000a84 <__aeabi_d2iz>
 8005372:	4683      	mov	fp, r0
 8005374:	f7fb f882 	bl	800047c <__aeabi_i2d>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	ec43 2b18 	vmov	d8, r2, r3
 8005380:	a367      	add	r3, pc, #412	; (adr r3, 8005520 <__ieee754_rem_pio2+0x300>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fb f8e3 	bl	8000550 <__aeabi_dmul>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fa ff25 	bl	80001e0 <__aeabi_dsub>
 8005396:	a364      	add	r3, pc, #400	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	4606      	mov	r6, r0
 800539e:	460f      	mov	r7, r1
 80053a0:	ec51 0b18 	vmov	r0, r1, d8
 80053a4:	f7fb f8d4 	bl	8000550 <__aeabi_dmul>
 80053a8:	f1bb 0f1f 	cmp.w	fp, #31
 80053ac:	4604      	mov	r4, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	dc0d      	bgt.n	80053ce <__ieee754_rem_pio2+0x1ae>
 80053b2:	4b6e      	ldr	r3, [pc, #440]	; (800556c <__ieee754_rem_pio2+0x34c>)
 80053b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	4543      	cmp	r3, r8
 80053be:	d006      	beq.n	80053ce <__ieee754_rem_pio2+0x1ae>
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fa ff0a 	bl	80001e0 <__aeabi_dsub>
 80053cc:	e00f      	b.n	80053ee <__ieee754_rem_pio2+0x1ce>
 80053ce:	462b      	mov	r3, r5
 80053d0:	4622      	mov	r2, r4
 80053d2:	4630      	mov	r0, r6
 80053d4:	4639      	mov	r1, r7
 80053d6:	f7fa ff03 	bl	80001e0 <__aeabi_dsub>
 80053da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053de:	9303      	str	r3, [sp, #12]
 80053e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80053e8:	f1b8 0f10 	cmp.w	r8, #16
 80053ec:	dc02      	bgt.n	80053f4 <__ieee754_rem_pio2+0x1d4>
 80053ee:	e9ca 0100 	strd	r0, r1, [sl]
 80053f2:	e039      	b.n	8005468 <__ieee754_rem_pio2+0x248>
 80053f4:	a34e      	add	r3, pc, #312	; (adr r3, 8005530 <__ieee754_rem_pio2+0x310>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	ec51 0b18 	vmov	r0, r1, d8
 80053fe:	f7fb f8a7 	bl	8000550 <__aeabi_dmul>
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4630      	mov	r0, r6
 800540c:	4639      	mov	r1, r7
 800540e:	f7fa fee7 	bl	80001e0 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4680      	mov	r8, r0
 8005418:	4689      	mov	r9, r1
 800541a:	4630      	mov	r0, r6
 800541c:	4639      	mov	r1, r7
 800541e:	f7fa fedf 	bl	80001e0 <__aeabi_dsub>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f7fa fedb 	bl	80001e0 <__aeabi_dsub>
 800542a:	a343      	add	r3, pc, #268	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
 8005434:	ec51 0b18 	vmov	r0, r1, d8
 8005438:	f7fb f88a 	bl	8000550 <__aeabi_dmul>
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	f7fa fece 	bl	80001e0 <__aeabi_dsub>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4604      	mov	r4, r0
 800544a:	460d      	mov	r5, r1
 800544c:	4640      	mov	r0, r8
 800544e:	4649      	mov	r1, r9
 8005450:	f7fa fec6 	bl	80001e0 <__aeabi_dsub>
 8005454:	9a03      	ldr	r2, [sp, #12]
 8005456:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b31      	cmp	r3, #49	; 0x31
 800545e:	dc24      	bgt.n	80054aa <__ieee754_rem_pio2+0x28a>
 8005460:	e9ca 0100 	strd	r0, r1, [sl]
 8005464:	4646      	mov	r6, r8
 8005466:	464f      	mov	r7, r9
 8005468:	e9da 8900 	ldrd	r8, r9, [sl]
 800546c:	4630      	mov	r0, r6
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4639      	mov	r1, r7
 8005474:	f7fa feb4 	bl	80001e0 <__aeabi_dsub>
 8005478:	462b      	mov	r3, r5
 800547a:	4622      	mov	r2, r4
 800547c:	f7fa feb0 	bl	80001e0 <__aeabi_dsub>
 8005480:	9b02      	ldr	r3, [sp, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005488:	f6bf af0a 	bge.w	80052a0 <__ieee754_rem_pio2+0x80>
 800548c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005490:	f8ca 3004 	str.w	r3, [sl, #4]
 8005494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005498:	f8ca 8000 	str.w	r8, [sl]
 800549c:	f8ca 0008 	str.w	r0, [sl, #8]
 80054a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80054a4:	f1cb 0b00 	rsb	fp, fp, #0
 80054a8:	e6fa      	b.n	80052a0 <__ieee754_rem_pio2+0x80>
 80054aa:	a327      	add	r3, pc, #156	; (adr r3, 8005548 <__ieee754_rem_pio2+0x328>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	ec51 0b18 	vmov	r0, r1, d8
 80054b4:	f7fb f84c 	bl	8000550 <__aeabi_dmul>
 80054b8:	4604      	mov	r4, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fa fe8c 	bl	80001e0 <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4606      	mov	r6, r0
 80054ce:	460f      	mov	r7, r1
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fa fe84 	bl	80001e0 <__aeabi_dsub>
 80054d8:	4622      	mov	r2, r4
 80054da:	462b      	mov	r3, r5
 80054dc:	f7fa fe80 	bl	80001e0 <__aeabi_dsub>
 80054e0:	a31b      	add	r3, pc, #108	; (adr r3, 8005550 <__ieee754_rem_pio2+0x330>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	ec51 0b18 	vmov	r0, r1, d8
 80054ee:	f7fb f82f 	bl	8000550 <__aeabi_dmul>
 80054f2:	4622      	mov	r2, r4
 80054f4:	462b      	mov	r3, r5
 80054f6:	f7fa fe73 	bl	80001e0 <__aeabi_dsub>
 80054fa:	4604      	mov	r4, r0
 80054fc:	460d      	mov	r5, r1
 80054fe:	e75f      	b.n	80053c0 <__ieee754_rem_pio2+0x1a0>
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <__ieee754_rem_pio2+0x350>)
 8005502:	4598      	cmp	r8, r3
 8005504:	dd36      	ble.n	8005574 <__ieee754_rem_pio2+0x354>
 8005506:	ee10 2a10 	vmov	r2, s0
 800550a:	462b      	mov	r3, r5
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fa fe66 	bl	80001e0 <__aeabi_dsub>
 8005514:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005518:	e9ca 0100 	strd	r0, r1, [sl]
 800551c:	e694      	b.n	8005248 <__ieee754_rem_pio2+0x28>
 800551e:	bf00      	nop
 8005520:	54400000 	.word	0x54400000
 8005524:	3ff921fb 	.word	0x3ff921fb
 8005528:	1a626331 	.word	0x1a626331
 800552c:	3dd0b461 	.word	0x3dd0b461
 8005530:	1a600000 	.word	0x1a600000
 8005534:	3dd0b461 	.word	0x3dd0b461
 8005538:	2e037073 	.word	0x2e037073
 800553c:	3ba3198a 	.word	0x3ba3198a
 8005540:	6dc9c883 	.word	0x6dc9c883
 8005544:	3fe45f30 	.word	0x3fe45f30
 8005548:	2e000000 	.word	0x2e000000
 800554c:	3ba3198a 	.word	0x3ba3198a
 8005550:	252049c1 	.word	0x252049c1
 8005554:	397b839a 	.word	0x397b839a
 8005558:	3fe921fb 	.word	0x3fe921fb
 800555c:	4002d97b 	.word	0x4002d97b
 8005560:	3ff921fb 	.word	0x3ff921fb
 8005564:	413921fb 	.word	0x413921fb
 8005568:	3fe00000 	.word	0x3fe00000
 800556c:	0800625c 	.word	0x0800625c
 8005570:	7fefffff 	.word	0x7fefffff
 8005574:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005578:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800557c:	ee10 0a10 	vmov	r0, s0
 8005580:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005584:	ee10 6a10 	vmov	r6, s0
 8005588:	460f      	mov	r7, r1
 800558a:	f7fb fa7b 	bl	8000a84 <__aeabi_d2iz>
 800558e:	f7fa ff75 	bl	800047c <__aeabi_i2d>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800559e:	f7fa fe1f 	bl	80001e0 <__aeabi_dsub>
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <__ieee754_rem_pio2+0x410>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	f7fa ffd3 	bl	8000550 <__aeabi_dmul>
 80055aa:	460f      	mov	r7, r1
 80055ac:	4606      	mov	r6, r0
 80055ae:	f7fb fa69 	bl	8000a84 <__aeabi_d2iz>
 80055b2:	f7fa ff63 	bl	800047c <__aeabi_i2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055c2:	f7fa fe0d 	bl	80001e0 <__aeabi_dsub>
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <__ieee754_rem_pio2+0x410>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	f7fa ffc1 	bl	8000550 <__aeabi_dmul>
 80055ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055d2:	ad04      	add	r5, sp, #16
 80055d4:	f04f 0803 	mov.w	r8, #3
 80055d8:	46a9      	mov	r9, r5
 80055da:	2600      	movs	r6, #0
 80055dc:	2700      	movs	r7, #0
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055e6:	46c3      	mov	fp, r8
 80055e8:	3d08      	subs	r5, #8
 80055ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80055ee:	f7fb fa17 	bl	8000a20 <__aeabi_dcmpeq>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d1f3      	bne.n	80055de <__ieee754_rem_pio2+0x3be>
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <__ieee754_rem_pio2+0x414>)
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	2302      	movs	r3, #2
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	4622      	mov	r2, r4
 8005600:	465b      	mov	r3, fp
 8005602:	4651      	mov	r1, sl
 8005604:	4648      	mov	r0, r9
 8005606:	f000 f8df 	bl	80057c8 <__kernel_rem_pio2>
 800560a:	9b02      	ldr	r3, [sp, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	4683      	mov	fp, r0
 8005610:	f6bf ae46 	bge.w	80052a0 <__ieee754_rem_pio2+0x80>
 8005614:	e9da 2100 	ldrd	r2, r1, [sl]
 8005618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800561c:	e9ca 2300 	strd	r2, r3, [sl]
 8005620:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005628:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800562c:	e73a      	b.n	80054a4 <__ieee754_rem_pio2+0x284>
 800562e:	bf00      	nop
 8005630:	41700000 	.word	0x41700000
 8005634:	080062dc 	.word	0x080062dc

08005638 <__kernel_cos>:
 8005638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	ec57 6b10 	vmov	r6, r7, d0
 8005640:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005644:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005648:	ed8d 1b00 	vstr	d1, [sp]
 800564c:	da07      	bge.n	800565e <__kernel_cos+0x26>
 800564e:	ee10 0a10 	vmov	r0, s0
 8005652:	4639      	mov	r1, r7
 8005654:	f7fb fa16 	bl	8000a84 <__aeabi_d2iz>
 8005658:	2800      	cmp	r0, #0
 800565a:	f000 8088 	beq.w	800576e <__kernel_cos+0x136>
 800565e:	4632      	mov	r2, r6
 8005660:	463b      	mov	r3, r7
 8005662:	4630      	mov	r0, r6
 8005664:	4639      	mov	r1, r7
 8005666:	f7fa ff73 	bl	8000550 <__aeabi_dmul>
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <__kernel_cos+0x178>)
 800566c:	2200      	movs	r2, #0
 800566e:	4604      	mov	r4, r0
 8005670:	460d      	mov	r5, r1
 8005672:	f7fa ff6d 	bl	8000550 <__aeabi_dmul>
 8005676:	a340      	add	r3, pc, #256	; (adr r3, 8005778 <__kernel_cos+0x140>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	4682      	mov	sl, r0
 800567e:	468b      	mov	fp, r1
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	f7fa ff64 	bl	8000550 <__aeabi_dmul>
 8005688:	a33d      	add	r3, pc, #244	; (adr r3, 8005780 <__kernel_cos+0x148>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa fda9 	bl	80001e4 <__adddf3>
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	f7fa ff5b 	bl	8000550 <__aeabi_dmul>
 800569a:	a33b      	add	r3, pc, #236	; (adr r3, 8005788 <__kernel_cos+0x150>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa fd9e 	bl	80001e0 <__aeabi_dsub>
 80056a4:	4622      	mov	r2, r4
 80056a6:	462b      	mov	r3, r5
 80056a8:	f7fa ff52 	bl	8000550 <__aeabi_dmul>
 80056ac:	a338      	add	r3, pc, #224	; (adr r3, 8005790 <__kernel_cos+0x158>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa fd97 	bl	80001e4 <__adddf3>
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	f7fa ff49 	bl	8000550 <__aeabi_dmul>
 80056be:	a336      	add	r3, pc, #216	; (adr r3, 8005798 <__kernel_cos+0x160>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa fd8c 	bl	80001e0 <__aeabi_dsub>
 80056c8:	4622      	mov	r2, r4
 80056ca:	462b      	mov	r3, r5
 80056cc:	f7fa ff40 	bl	8000550 <__aeabi_dmul>
 80056d0:	a333      	add	r3, pc, #204	; (adr r3, 80057a0 <__kernel_cos+0x168>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa fd85 	bl	80001e4 <__adddf3>
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f7fa ff37 	bl	8000550 <__aeabi_dmul>
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	f7fa ff33 	bl	8000550 <__aeabi_dmul>
 80056ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
 80056f2:	4630      	mov	r0, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	f7fa ff2b 	bl	8000550 <__aeabi_dmul>
 80056fa:	460b      	mov	r3, r1
 80056fc:	4602      	mov	r2, r0
 80056fe:	4629      	mov	r1, r5
 8005700:	4620      	mov	r0, r4
 8005702:	f7fa fd6d 	bl	80001e0 <__aeabi_dsub>
 8005706:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <__kernel_cos+0x17c>)
 8005708:	4598      	cmp	r8, r3
 800570a:	4606      	mov	r6, r0
 800570c:	460f      	mov	r7, r1
 800570e:	dc10      	bgt.n	8005732 <__kernel_cos+0xfa>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4650      	mov	r0, sl
 8005716:	4659      	mov	r1, fp
 8005718:	f7fa fd62 	bl	80001e0 <__aeabi_dsub>
 800571c:	460b      	mov	r3, r1
 800571e:	4926      	ldr	r1, [pc, #152]	; (80057b8 <__kernel_cos+0x180>)
 8005720:	4602      	mov	r2, r0
 8005722:	2000      	movs	r0, #0
 8005724:	f7fa fd5c 	bl	80001e0 <__aeabi_dsub>
 8005728:	ec41 0b10 	vmov	d0, r0, r1
 800572c:	b003      	add	sp, #12
 800572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005732:	4b22      	ldr	r3, [pc, #136]	; (80057bc <__kernel_cos+0x184>)
 8005734:	4920      	ldr	r1, [pc, #128]	; (80057b8 <__kernel_cos+0x180>)
 8005736:	4598      	cmp	r8, r3
 8005738:	bfcc      	ite	gt
 800573a:	4d21      	ldrgt	r5, [pc, #132]	; (80057c0 <__kernel_cos+0x188>)
 800573c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005740:	2400      	movs	r4, #0
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	2000      	movs	r0, #0
 8005748:	f7fa fd4a 	bl	80001e0 <__aeabi_dsub>
 800574c:	4622      	mov	r2, r4
 800574e:	4680      	mov	r8, r0
 8005750:	4689      	mov	r9, r1
 8005752:	462b      	mov	r3, r5
 8005754:	4650      	mov	r0, sl
 8005756:	4659      	mov	r1, fp
 8005758:	f7fa fd42 	bl	80001e0 <__aeabi_dsub>
 800575c:	4632      	mov	r2, r6
 800575e:	463b      	mov	r3, r7
 8005760:	f7fa fd3e 	bl	80001e0 <__aeabi_dsub>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	e7da      	b.n	8005724 <__kernel_cos+0xec>
 800576e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80057a8 <__kernel_cos+0x170>
 8005772:	e7db      	b.n	800572c <__kernel_cos+0xf4>
 8005774:	f3af 8000 	nop.w
 8005778:	be8838d4 	.word	0xbe8838d4
 800577c:	bda8fae9 	.word	0xbda8fae9
 8005780:	bdb4b1c4 	.word	0xbdb4b1c4
 8005784:	3e21ee9e 	.word	0x3e21ee9e
 8005788:	809c52ad 	.word	0x809c52ad
 800578c:	3e927e4f 	.word	0x3e927e4f
 8005790:	19cb1590 	.word	0x19cb1590
 8005794:	3efa01a0 	.word	0x3efa01a0
 8005798:	16c15177 	.word	0x16c15177
 800579c:	3f56c16c 	.word	0x3f56c16c
 80057a0:	5555554c 	.word	0x5555554c
 80057a4:	3fa55555 	.word	0x3fa55555
 80057a8:	00000000 	.word	0x00000000
 80057ac:	3ff00000 	.word	0x3ff00000
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	3fd33332 	.word	0x3fd33332
 80057b8:	3ff00000 	.word	0x3ff00000
 80057bc:	3fe90000 	.word	0x3fe90000
 80057c0:	3fd20000 	.word	0x3fd20000
 80057c4:	00000000 	.word	0x00000000

080057c8 <__kernel_rem_pio2>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	ed2d 8b02 	vpush	{d8}
 80057d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80057d4:	f112 0f14 	cmn.w	r2, #20
 80057d8:	9308      	str	r3, [sp, #32]
 80057da:	9101      	str	r1, [sp, #4]
 80057dc:	4bc4      	ldr	r3, [pc, #784]	; (8005af0 <__kernel_rem_pio2+0x328>)
 80057de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80057e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80057e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80057ee:	bfa8      	it	ge
 80057f0:	1ed4      	subge	r4, r2, #3
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	bfb2      	itee	lt
 80057f6:	2400      	movlt	r4, #0
 80057f8:	2318      	movge	r3, #24
 80057fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80057fe:	f06f 0317 	mvn.w	r3, #23
 8005802:	fb04 3303 	mla	r3, r4, r3, r3
 8005806:	eb03 0a02 	add.w	sl, r3, r2
 800580a:	9b02      	ldr	r3, [sp, #8]
 800580c:	9a06      	ldr	r2, [sp, #24]
 800580e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005ae0 <__kernel_rem_pio2+0x318>
 8005812:	eb03 0802 	add.w	r8, r3, r2
 8005816:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005818:	1aa7      	subs	r7, r4, r2
 800581a:	ae22      	add	r6, sp, #136	; 0x88
 800581c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005820:	2500      	movs	r5, #0
 8005822:	4545      	cmp	r5, r8
 8005824:	dd13      	ble.n	800584e <__kernel_rem_pio2+0x86>
 8005826:	9b08      	ldr	r3, [sp, #32]
 8005828:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005ae0 <__kernel_rem_pio2+0x318>
 800582c:	aa22      	add	r2, sp, #136	; 0x88
 800582e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005832:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	9b02      	ldr	r3, [sp, #8]
 800583c:	4598      	cmp	r8, r3
 800583e:	dc2f      	bgt.n	80058a0 <__kernel_rem_pio2+0xd8>
 8005840:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005844:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005848:	462f      	mov	r7, r5
 800584a:	2600      	movs	r6, #0
 800584c:	e01b      	b.n	8005886 <__kernel_rem_pio2+0xbe>
 800584e:	42ef      	cmn	r7, r5
 8005850:	d407      	bmi.n	8005862 <__kernel_rem_pio2+0x9a>
 8005852:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005856:	f7fa fe11 	bl	800047c <__aeabi_i2d>
 800585a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800585e:	3501      	adds	r5, #1
 8005860:	e7df      	b.n	8005822 <__kernel_rem_pio2+0x5a>
 8005862:	ec51 0b18 	vmov	r0, r1, d8
 8005866:	e7f8      	b.n	800585a <__kernel_rem_pio2+0x92>
 8005868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005870:	f7fa fe6e 	bl	8000550 <__aeabi_dmul>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587c:	f7fa fcb2 	bl	80001e4 <__adddf3>
 8005880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005884:	3601      	adds	r6, #1
 8005886:	9b06      	ldr	r3, [sp, #24]
 8005888:	429e      	cmp	r6, r3
 800588a:	f1a7 0708 	sub.w	r7, r7, #8
 800588e:	ddeb      	ble.n	8005868 <__kernel_rem_pio2+0xa0>
 8005890:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005894:	f108 0801 	add.w	r8, r8, #1
 8005898:	ecab 7b02 	vstmia	fp!, {d7}
 800589c:	3508      	adds	r5, #8
 800589e:	e7cc      	b.n	800583a <__kernel_rem_pio2+0x72>
 80058a0:	9b02      	ldr	r3, [sp, #8]
 80058a2:	aa0e      	add	r2, sp, #56	; 0x38
 80058a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058a8:	930d      	str	r3, [sp, #52]	; 0x34
 80058aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80058ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80058b0:	9c02      	ldr	r4, [sp, #8]
 80058b2:	930c      	str	r3, [sp, #48]	; 0x30
 80058b4:	00e3      	lsls	r3, r4, #3
 80058b6:	930a      	str	r3, [sp, #40]	; 0x28
 80058b8:	ab9a      	add	r3, sp, #616	; 0x268
 80058ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80058c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80058c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80058c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80058cc:	46c3      	mov	fp, r8
 80058ce:	46a1      	mov	r9, r4
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	f1a5 0508 	sub.w	r5, r5, #8
 80058d8:	dc77      	bgt.n	80059ca <__kernel_rem_pio2+0x202>
 80058da:	ec47 6b10 	vmov	d0, r6, r7
 80058de:	4650      	mov	r0, sl
 80058e0:	f000 fc0a 	bl	80060f8 <scalbn>
 80058e4:	ec57 6b10 	vmov	r6, r7, d0
 80058e8:	2200      	movs	r2, #0
 80058ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80058ee:	ee10 0a10 	vmov	r0, s0
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fa fe2c 	bl	8000550 <__aeabi_dmul>
 80058f8:	ec41 0b10 	vmov	d0, r0, r1
 80058fc:	f000 fb7c 	bl	8005ff8 <floor>
 8005900:	4b7c      	ldr	r3, [pc, #496]	; (8005af4 <__kernel_rem_pio2+0x32c>)
 8005902:	ec51 0b10 	vmov	r0, r1, d0
 8005906:	2200      	movs	r2, #0
 8005908:	f7fa fe22 	bl	8000550 <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fa fc64 	bl	80001e0 <__aeabi_dsub>
 8005918:	460f      	mov	r7, r1
 800591a:	4606      	mov	r6, r0
 800591c:	f7fb f8b2 	bl	8000a84 <__aeabi_d2iz>
 8005920:	9004      	str	r0, [sp, #16]
 8005922:	f7fa fdab 	bl	800047c <__aeabi_i2d>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa fc57 	bl	80001e0 <__aeabi_dsub>
 8005932:	f1ba 0f00 	cmp.w	sl, #0
 8005936:	4606      	mov	r6, r0
 8005938:	460f      	mov	r7, r1
 800593a:	dd6d      	ble.n	8005a18 <__kernel_rem_pio2+0x250>
 800593c:	1e62      	subs	r2, r4, #1
 800593e:	ab0e      	add	r3, sp, #56	; 0x38
 8005940:	9d04      	ldr	r5, [sp, #16]
 8005942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005946:	f1ca 0118 	rsb	r1, sl, #24
 800594a:	fa40 f301 	asr.w	r3, r0, r1
 800594e:	441d      	add	r5, r3
 8005950:	408b      	lsls	r3, r1
 8005952:	1ac0      	subs	r0, r0, r3
 8005954:	ab0e      	add	r3, sp, #56	; 0x38
 8005956:	9504      	str	r5, [sp, #16]
 8005958:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800595c:	f1ca 0317 	rsb	r3, sl, #23
 8005960:	fa40 fb03 	asr.w	fp, r0, r3
 8005964:	f1bb 0f00 	cmp.w	fp, #0
 8005968:	dd65      	ble.n	8005a36 <__kernel_rem_pio2+0x26e>
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	2200      	movs	r2, #0
 800596e:	3301      	adds	r3, #1
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	4615      	mov	r5, r2
 8005974:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005978:	4294      	cmp	r4, r2
 800597a:	f300 809c 	bgt.w	8005ab6 <__kernel_rem_pio2+0x2ee>
 800597e:	f1ba 0f00 	cmp.w	sl, #0
 8005982:	dd07      	ble.n	8005994 <__kernel_rem_pio2+0x1cc>
 8005984:	f1ba 0f01 	cmp.w	sl, #1
 8005988:	f000 80c0 	beq.w	8005b0c <__kernel_rem_pio2+0x344>
 800598c:	f1ba 0f02 	cmp.w	sl, #2
 8005990:	f000 80c6 	beq.w	8005b20 <__kernel_rem_pio2+0x358>
 8005994:	f1bb 0f02 	cmp.w	fp, #2
 8005998:	d14d      	bne.n	8005a36 <__kernel_rem_pio2+0x26e>
 800599a:	4632      	mov	r2, r6
 800599c:	463b      	mov	r3, r7
 800599e:	4956      	ldr	r1, [pc, #344]	; (8005af8 <__kernel_rem_pio2+0x330>)
 80059a0:	2000      	movs	r0, #0
 80059a2:	f7fa fc1d 	bl	80001e0 <__aeabi_dsub>
 80059a6:	4606      	mov	r6, r0
 80059a8:	460f      	mov	r7, r1
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	d043      	beq.n	8005a36 <__kernel_rem_pio2+0x26e>
 80059ae:	4650      	mov	r0, sl
 80059b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005ae8 <__kernel_rem_pio2+0x320>
 80059b4:	f000 fba0 	bl	80060f8 <scalbn>
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	ec53 2b10 	vmov	r2, r3, d0
 80059c0:	f7fa fc0e 	bl	80001e0 <__aeabi_dsub>
 80059c4:	4606      	mov	r6, r0
 80059c6:	460f      	mov	r7, r1
 80059c8:	e035      	b.n	8005a36 <__kernel_rem_pio2+0x26e>
 80059ca:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <__kernel_rem_pio2+0x334>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fdbd 	bl	8000550 <__aeabi_dmul>
 80059d6:	f7fb f855 	bl	8000a84 <__aeabi_d2iz>
 80059da:	f7fa fd4f 	bl	800047c <__aeabi_i2d>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	ec43 2b18 	vmov	d8, r2, r3
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <__kernel_rem_pio2+0x338>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	f7fa fdb1 	bl	8000550 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4630      	mov	r0, r6
 80059f4:	4639      	mov	r1, r7
 80059f6:	f7fa fbf3 	bl	80001e0 <__aeabi_dsub>
 80059fa:	f7fb f843 	bl	8000a84 <__aeabi_d2iz>
 80059fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a02:	f84b 0b04 	str.w	r0, [fp], #4
 8005a06:	ec51 0b18 	vmov	r0, r1, d8
 8005a0a:	f7fa fbeb 	bl	80001e4 <__adddf3>
 8005a0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a12:	4606      	mov	r6, r0
 8005a14:	460f      	mov	r7, r1
 8005a16:	e75b      	b.n	80058d0 <__kernel_rem_pio2+0x108>
 8005a18:	d106      	bne.n	8005a28 <__kernel_rem_pio2+0x260>
 8005a1a:	1e63      	subs	r3, r4, #1
 8005a1c:	aa0e      	add	r2, sp, #56	; 0x38
 8005a1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a22:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005a26:	e79d      	b.n	8005964 <__kernel_rem_pio2+0x19c>
 8005a28:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <__kernel_rem_pio2+0x33c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f7fb f816 	bl	8000a5c <__aeabi_dcmpge>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d13d      	bne.n	8005ab0 <__kernel_rem_pio2+0x2e8>
 8005a34:	4683      	mov	fp, r0
 8005a36:	2200      	movs	r2, #0
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fa ffef 	bl	8000a20 <__aeabi_dcmpeq>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f000 80c0 	beq.w	8005bc8 <__kernel_rem_pio2+0x400>
 8005a48:	1e65      	subs	r5, r4, #1
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	9902      	ldr	r1, [sp, #8]
 8005a50:	428b      	cmp	r3, r1
 8005a52:	da6c      	bge.n	8005b2e <__kernel_rem_pio2+0x366>
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	f000 8089 	beq.w	8005b6c <__kernel_rem_pio2+0x3a4>
 8005a5a:	ab0e      	add	r3, sp, #56	; 0x38
 8005a5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005a60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80ad 	beq.w	8005bc4 <__kernel_rem_pio2+0x3fc>
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005ae8 <__kernel_rem_pio2+0x320>
 8005a70:	f000 fb42 	bl	80060f8 <scalbn>
 8005a74:	ab9a      	add	r3, sp, #616	; 0x268
 8005a76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005a7a:	ec57 6b10 	vmov	r6, r7, d0
 8005a7e:	00ec      	lsls	r4, r5, #3
 8005a80:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005a84:	46aa      	mov	sl, r5
 8005a86:	f1ba 0f00 	cmp.w	sl, #0
 8005a8a:	f280 80d6 	bge.w	8005c3a <__kernel_rem_pio2+0x472>
 8005a8e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005ae0 <__kernel_rem_pio2+0x318>
 8005a92:	462e      	mov	r6, r5
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	f2c0 8104 	blt.w	8005ca2 <__kernel_rem_pio2+0x4da>
 8005a9a:	ab72      	add	r3, sp, #456	; 0x1c8
 8005a9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005aa0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005b08 <__kernel_rem_pio2+0x340>
 8005aa4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005aa8:	f04f 0800 	mov.w	r8, #0
 8005aac:	1baf      	subs	r7, r5, r6
 8005aae:	e0ea      	b.n	8005c86 <__kernel_rem_pio2+0x4be>
 8005ab0:	f04f 0b02 	mov.w	fp, #2
 8005ab4:	e759      	b.n	800596a <__kernel_rem_pio2+0x1a2>
 8005ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aba:	b955      	cbnz	r5, 8005ad2 <__kernel_rem_pio2+0x30a>
 8005abc:	b123      	cbz	r3, 8005ac8 <__kernel_rem_pio2+0x300>
 8005abe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005ac2:	f8c8 3000 	str.w	r3, [r8]
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	3201      	adds	r2, #1
 8005aca:	f108 0804 	add.w	r8, r8, #4
 8005ace:	461d      	mov	r5, r3
 8005ad0:	e752      	b.n	8005978 <__kernel_rem_pio2+0x1b0>
 8005ad2:	1acb      	subs	r3, r1, r3
 8005ad4:	f8c8 3000 	str.w	r3, [r8]
 8005ad8:	462b      	mov	r3, r5
 8005ada:	e7f5      	b.n	8005ac8 <__kernel_rem_pio2+0x300>
 8005adc:	f3af 8000 	nop.w
	...
 8005aec:	3ff00000 	.word	0x3ff00000
 8005af0:	08006428 	.word	0x08006428
 8005af4:	40200000 	.word	0x40200000
 8005af8:	3ff00000 	.word	0x3ff00000
 8005afc:	3e700000 	.word	0x3e700000
 8005b00:	41700000 	.word	0x41700000
 8005b04:	3fe00000 	.word	0x3fe00000
 8005b08:	080063e8 	.word	0x080063e8
 8005b0c:	1e62      	subs	r2, r4, #1
 8005b0e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b18:	a90e      	add	r1, sp, #56	; 0x38
 8005b1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b1e:	e739      	b.n	8005994 <__kernel_rem_pio2+0x1cc>
 8005b20:	1e62      	subs	r2, r4, #1
 8005b22:	ab0e      	add	r3, sp, #56	; 0x38
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b2c:	e7f4      	b.n	8005b18 <__kernel_rem_pio2+0x350>
 8005b2e:	a90e      	add	r1, sp, #56	; 0x38
 8005b30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	430a      	orrs	r2, r1
 8005b38:	e789      	b.n	8005a4e <__kernel_rem_pio2+0x286>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d0fa      	beq.n	8005b3a <__kernel_rem_pio2+0x372>
 8005b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b46:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005b4a:	446a      	add	r2, sp
 8005b4c:	3a98      	subs	r2, #152	; 0x98
 8005b4e:	920a      	str	r2, [sp, #40]	; 0x28
 8005b50:	9a08      	ldr	r2, [sp, #32]
 8005b52:	18e3      	adds	r3, r4, r3
 8005b54:	18a5      	adds	r5, r4, r2
 8005b56:	aa22      	add	r2, sp, #136	; 0x88
 8005b58:	f104 0801 	add.w	r8, r4, #1
 8005b5c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	4543      	cmp	r3, r8
 8005b66:	da04      	bge.n	8005b72 <__kernel_rem_pio2+0x3aa>
 8005b68:	461c      	mov	r4, r3
 8005b6a:	e6a3      	b.n	80058b4 <__kernel_rem_pio2+0xec>
 8005b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7e4      	b.n	8005b3c <__kernel_rem_pio2+0x374>
 8005b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005b78:	f7fa fc80 	bl	800047c <__aeabi_i2d>
 8005b7c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b82:	46ab      	mov	fp, r5
 8005b84:	461c      	mov	r4, r3
 8005b86:	f04f 0900 	mov.w	r9, #0
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	9b06      	ldr	r3, [sp, #24]
 8005b90:	4599      	cmp	r9, r3
 8005b92:	dd06      	ble.n	8005ba2 <__kernel_rem_pio2+0x3da>
 8005b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b96:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005b9a:	f108 0801 	add.w	r8, r8, #1
 8005b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba0:	e7df      	b.n	8005b62 <__kernel_rem_pio2+0x39a>
 8005ba2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005ba6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005baa:	f7fa fcd1 	bl	8000550 <__aeabi_dmul>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa fb15 	bl	80001e4 <__adddf3>
 8005bba:	f109 0901 	add.w	r9, r9, #1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	e7e4      	b.n	8005b8e <__kernel_rem_pio2+0x3c6>
 8005bc4:	3d01      	subs	r5, #1
 8005bc6:	e748      	b.n	8005a5a <__kernel_rem_pio2+0x292>
 8005bc8:	ec47 6b10 	vmov	d0, r6, r7
 8005bcc:	f1ca 0000 	rsb	r0, sl, #0
 8005bd0:	f000 fa92 	bl	80060f8 <scalbn>
 8005bd4:	ec57 6b10 	vmov	r6, r7, d0
 8005bd8:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <__kernel_rem_pio2+0x694>)
 8005bda:	ee10 0a10 	vmov	r0, s0
 8005bde:	2200      	movs	r2, #0
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa ff3b 	bl	8000a5c <__aeabi_dcmpge>
 8005be6:	b1f8      	cbz	r0, 8005c28 <__kernel_rem_pio2+0x460>
 8005be8:	4b9d      	ldr	r3, [pc, #628]	; (8005e60 <__kernel_rem_pio2+0x698>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	4630      	mov	r0, r6
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa fcae 	bl	8000550 <__aeabi_dmul>
 8005bf4:	f7fa ff46 	bl	8000a84 <__aeabi_d2iz>
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	f7fa fc3f 	bl	800047c <__aeabi_i2d>
 8005bfe:	4b97      	ldr	r3, [pc, #604]	; (8005e5c <__kernel_rem_pio2+0x694>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fca5 	bl	8000550 <__aeabi_dmul>
 8005c06:	460b      	mov	r3, r1
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7fa fae7 	bl	80001e0 <__aeabi_dsub>
 8005c12:	f7fa ff37 	bl	8000a84 <__aeabi_d2iz>
 8005c16:	1c65      	adds	r5, r4, #1
 8005c18:	ab0e      	add	r3, sp, #56	; 0x38
 8005c1a:	f10a 0a18 	add.w	sl, sl, #24
 8005c1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005c22:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005c26:	e720      	b.n	8005a6a <__kernel_rem_pio2+0x2a2>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa ff2a 	bl	8000a84 <__aeabi_d2iz>
 8005c30:	ab0e      	add	r3, sp, #56	; 0x38
 8005c32:	4625      	mov	r5, r4
 8005c34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005c38:	e717      	b.n	8005a6a <__kernel_rem_pio2+0x2a2>
 8005c3a:	ab0e      	add	r3, sp, #56	; 0x38
 8005c3c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005c40:	f7fa fc1c 	bl	800047c <__aeabi_i2d>
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	f7fa fc82 	bl	8000550 <__aeabi_dmul>
 8005c4c:	4b84      	ldr	r3, [pc, #528]	; (8005e60 <__kernel_rem_pio2+0x698>)
 8005c4e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005c52:	2200      	movs	r2, #0
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa fc7a 	bl	8000550 <__aeabi_dmul>
 8005c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c60:	4606      	mov	r6, r0
 8005c62:	460f      	mov	r7, r1
 8005c64:	e70f      	b.n	8005a86 <__kernel_rem_pio2+0x2be>
 8005c66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005c6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005c6e:	f7fa fc6f 	bl	8000550 <__aeabi_dmul>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c7a:	f7fa fab3 	bl	80001e4 <__adddf3>
 8005c7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c82:	f108 0801 	add.w	r8, r8, #1
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	4598      	cmp	r8, r3
 8005c8a:	dc01      	bgt.n	8005c90 <__kernel_rem_pio2+0x4c8>
 8005c8c:	45b8      	cmp	r8, r7
 8005c8e:	ddea      	ble.n	8005c66 <__kernel_rem_pio2+0x49e>
 8005c90:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005c94:	ab4a      	add	r3, sp, #296	; 0x128
 8005c96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005c9a:	ed87 7b00 	vstr	d7, [r7]
 8005c9e:	3e01      	subs	r6, #1
 8005ca0:	e6f8      	b.n	8005a94 <__kernel_rem_pio2+0x2cc>
 8005ca2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	dc0b      	bgt.n	8005cc0 <__kernel_rem_pio2+0x4f8>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc35      	bgt.n	8005d18 <__kernel_rem_pio2+0x550>
 8005cac:	d059      	beq.n	8005d62 <__kernel_rem_pio2+0x59a>
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	f003 0007 	and.w	r0, r3, #7
 8005cb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005cb8:	ecbd 8b02 	vpop	{d8}
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d1f3      	bne.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005cc6:	ab4a      	add	r3, sp, #296	; 0x128
 8005cc8:	4423      	add	r3, r4
 8005cca:	9306      	str	r3, [sp, #24]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	469a      	mov	sl, r3
 8005cd0:	9502      	str	r5, [sp, #8]
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f1aa 0a08 	sub.w	sl, sl, #8
 8005cda:	dc6b      	bgt.n	8005db4 <__kernel_rem_pio2+0x5ec>
 8005cdc:	46aa      	mov	sl, r5
 8005cde:	f1ba 0f01 	cmp.w	sl, #1
 8005ce2:	f1a4 0408 	sub.w	r4, r4, #8
 8005ce6:	f300 8085 	bgt.w	8005df4 <__kernel_rem_pio2+0x62c>
 8005cea:	9c06      	ldr	r4, [sp, #24]
 8005cec:	2000      	movs	r0, #0
 8005cee:	3408      	adds	r4, #8
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	2d01      	cmp	r5, #1
 8005cf4:	f300 809d 	bgt.w	8005e32 <__kernel_rem_pio2+0x66a>
 8005cf8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005cfc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005d00:	f1bb 0f00 	cmp.w	fp, #0
 8005d04:	f040 809b 	bne.w	8005e3e <__kernel_rem_pio2+0x676>
 8005d08:	9b01      	ldr	r3, [sp, #4]
 8005d0a:	e9c3 5600 	strd	r5, r6, [r3]
 8005d0e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005d12:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005d16:	e7ca      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005d18:	3408      	adds	r4, #8
 8005d1a:	ab4a      	add	r3, sp, #296	; 0x128
 8005d1c:	441c      	add	r4, r3
 8005d1e:	462e      	mov	r6, r5
 8005d20:	2000      	movs	r0, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	da36      	bge.n	8005d96 <__kernel_rem_pio2+0x5ce>
 8005d28:	f1bb 0f00 	cmp.w	fp, #0
 8005d2c:	d039      	beq.n	8005da2 <__kernel_rem_pio2+0x5da>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d34:	9c01      	ldr	r4, [sp, #4]
 8005d36:	e9c4 2300 	strd	r2, r3, [r4]
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005d42:	f7fa fa4d 	bl	80001e0 <__aeabi_dsub>
 8005d46:	ae4c      	add	r6, sp, #304	; 0x130
 8005d48:	2401      	movs	r4, #1
 8005d4a:	42a5      	cmp	r5, r4
 8005d4c:	da2c      	bge.n	8005da8 <__kernel_rem_pio2+0x5e0>
 8005d4e:	f1bb 0f00 	cmp.w	fp, #0
 8005d52:	d002      	beq.n	8005d5a <__kernel_rem_pio2+0x592>
 8005d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d58:	4619      	mov	r1, r3
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005d60:	e7a5      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005d62:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005d66:	eb0d 0403 	add.w	r4, sp, r3
 8005d6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005d6e:	2000      	movs	r0, #0
 8005d70:	2100      	movs	r1, #0
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	da09      	bge.n	8005d8a <__kernel_rem_pio2+0x5c2>
 8005d76:	f1bb 0f00 	cmp.w	fp, #0
 8005d7a:	d002      	beq.n	8005d82 <__kernel_rem_pio2+0x5ba>
 8005d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d80:	4619      	mov	r1, r3
 8005d82:	9b01      	ldr	r3, [sp, #4]
 8005d84:	e9c3 0100 	strd	r0, r1, [r3]
 8005d88:	e791      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005d8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d8e:	f7fa fa29 	bl	80001e4 <__adddf3>
 8005d92:	3d01      	subs	r5, #1
 8005d94:	e7ed      	b.n	8005d72 <__kernel_rem_pio2+0x5aa>
 8005d96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d9a:	f7fa fa23 	bl	80001e4 <__adddf3>
 8005d9e:	3e01      	subs	r6, #1
 8005da0:	e7c0      	b.n	8005d24 <__kernel_rem_pio2+0x55c>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	e7c5      	b.n	8005d34 <__kernel_rem_pio2+0x56c>
 8005da8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005dac:	f7fa fa1a 	bl	80001e4 <__adddf3>
 8005db0:	3401      	adds	r4, #1
 8005db2:	e7ca      	b.n	8005d4a <__kernel_rem_pio2+0x582>
 8005db4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005db8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	9302      	str	r3, [sp, #8]
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fa0b 	bl	80001e4 <__adddf3>
 8005dce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fa01 	bl	80001e0 <__aeabi_dsub>
 8005dde:	4632      	mov	r2, r6
 8005de0:	463b      	mov	r3, r7
 8005de2:	f7fa f9ff 	bl	80001e4 <__adddf3>
 8005de6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005dea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005dee:	ed8a 7b00 	vstr	d7, [sl]
 8005df2:	e76e      	b.n	8005cd2 <__kernel_rem_pio2+0x50a>
 8005df4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005df8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4632      	mov	r2, r6
 8005e00:	463b      	mov	r3, r7
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa f9ee 	bl	80001e4 <__adddf3>
 8005e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa f9e4 	bl	80001e0 <__aeabi_dsub>
 8005e18:	4632      	mov	r2, r6
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	f7fa f9e2 	bl	80001e4 <__adddf3>
 8005e20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e28:	ed84 7b00 	vstr	d7, [r4]
 8005e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e30:	e755      	b.n	8005cde <__kernel_rem_pio2+0x516>
 8005e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e36:	f7fa f9d5 	bl	80001e4 <__adddf3>
 8005e3a:	3d01      	subs	r5, #1
 8005e3c:	e759      	b.n	8005cf2 <__kernel_rem_pio2+0x52a>
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	9a01      	ldr	r2, [sp, #4]
 8005e42:	601d      	str	r5, [r3, #0]
 8005e44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005e48:	605c      	str	r4, [r3, #4]
 8005e4a:	609f      	str	r7, [r3, #8]
 8005e4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005e50:	60d3      	str	r3, [r2, #12]
 8005e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e56:	6110      	str	r0, [r2, #16]
 8005e58:	6153      	str	r3, [r2, #20]
 8005e5a:	e728      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005e5c:	41700000 	.word	0x41700000
 8005e60:	3e700000 	.word	0x3e700000
 8005e64:	00000000 	.word	0x00000000

08005e68 <__kernel_sin>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	ed2d 8b04 	vpush	{d8-d9}
 8005e70:	eeb0 8a41 	vmov.f32	s16, s2
 8005e74:	eef0 8a61 	vmov.f32	s17, s3
 8005e78:	ec55 4b10 	vmov	r4, r5, d0
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005e86:	9001      	str	r0, [sp, #4]
 8005e88:	da06      	bge.n	8005e98 <__kernel_sin+0x30>
 8005e8a:	ee10 0a10 	vmov	r0, s0
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7fa fdf8 	bl	8000a84 <__aeabi_d2iz>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d051      	beq.n	8005f3c <__kernel_sin+0xd4>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fb56 	bl	8000550 <__aeabi_dmul>
 8005ea4:	4682      	mov	sl, r0
 8005ea6:	468b      	mov	fp, r1
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4620      	mov	r0, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	f7fa fb4e 	bl	8000550 <__aeabi_dmul>
 8005eb4:	a341      	add	r3, pc, #260	; (adr r3, 8005fbc <__kernel_sin+0x154>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	4680      	mov	r8, r0
 8005ebc:	4689      	mov	r9, r1
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	f7fa fb45 	bl	8000550 <__aeabi_dmul>
 8005ec6:	a33f      	add	r3, pc, #252	; (adr r3, 8005fc4 <__kernel_sin+0x15c>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa f988 	bl	80001e0 <__aeabi_dsub>
 8005ed0:	4652      	mov	r2, sl
 8005ed2:	465b      	mov	r3, fp
 8005ed4:	f7fa fb3c 	bl	8000550 <__aeabi_dmul>
 8005ed8:	a33c      	add	r3, pc, #240	; (adr r3, 8005fcc <__kernel_sin+0x164>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa f981 	bl	80001e4 <__adddf3>
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	465b      	mov	r3, fp
 8005ee6:	f7fa fb33 	bl	8000550 <__aeabi_dmul>
 8005eea:	a33a      	add	r3, pc, #232	; (adr r3, 8005fd4 <__kernel_sin+0x16c>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa f976 	bl	80001e0 <__aeabi_dsub>
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	f7fa fb2a 	bl	8000550 <__aeabi_dmul>
 8005efc:	a337      	add	r3, pc, #220	; (adr r3, 8005fdc <__kernel_sin+0x174>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f96f 	bl	80001e4 <__adddf3>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	b9eb      	cbnz	r3, 8005f4a <__kernel_sin+0xe2>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4650      	mov	r0, sl
 8005f14:	4659      	mov	r1, fp
 8005f16:	f7fa fb1b 	bl	8000550 <__aeabi_dmul>
 8005f1a:	a325      	add	r3, pc, #148	; (adr r3, 8005fb0 <__kernel_sin+0x148>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f7fa f95e 	bl	80001e0 <__aeabi_dsub>
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	f7fa fb12 	bl	8000550 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa f956 	bl	80001e4 <__adddf3>
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	ec45 4b10 	vmov	d0, r4, r5
 8005f40:	b003      	add	sp, #12
 8005f42:	ecbd 8b04 	vpop	{d8-d9}
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <__kernel_sin+0x150>)
 8005f4c:	ec51 0b18 	vmov	r0, r1, d8
 8005f50:	2200      	movs	r2, #0
 8005f52:	f7fa fafd 	bl	8000550 <__aeabi_dmul>
 8005f56:	4632      	mov	r2, r6
 8005f58:	ec41 0b19 	vmov	d9, r0, r1
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa faf5 	bl	8000550 <__aeabi_dmul>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	ec51 0b19 	vmov	r0, r1, d9
 8005f6e:	f7fa f937 	bl	80001e0 <__aeabi_dsub>
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	f7fa faeb 	bl	8000550 <__aeabi_dmul>
 8005f7a:	ec53 2b18 	vmov	r2, r3, d8
 8005f7e:	f7fa f92f 	bl	80001e0 <__aeabi_dsub>
 8005f82:	a30b      	add	r3, pc, #44	; (adr r3, 8005fb0 <__kernel_sin+0x148>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	4606      	mov	r6, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa fade 	bl	8000550 <__aeabi_dmul>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa f922 	bl	80001e4 <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7fa f91a 	bl	80001e0 <__aeabi_dsub>
 8005fac:	e7c4      	b.n	8005f38 <__kernel_sin+0xd0>
 8005fae:	bf00      	nop
 8005fb0:	55555549 	.word	0x55555549
 8005fb4:	3fc55555 	.word	0x3fc55555
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	5acfd57c 	.word	0x5acfd57c
 8005fc0:	3de5d93a 	.word	0x3de5d93a
 8005fc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005fc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005fcc:	57b1fe7d 	.word	0x57b1fe7d
 8005fd0:	3ec71de3 	.word	0x3ec71de3
 8005fd4:	19c161d5 	.word	0x19c161d5
 8005fd8:	3f2a01a0 	.word	0x3f2a01a0
 8005fdc:	1110f8a6 	.word	0x1110f8a6
 8005fe0:	3f811111 	.word	0x3f811111

08005fe4 <fabs>:
 8005fe4:	ec51 0b10 	vmov	r0, r1, d0
 8005fe8:	ee10 2a10 	vmov	r2, s0
 8005fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ff0:	ec43 2b10 	vmov	d0, r2, r3
 8005ff4:	4770      	bx	lr
	...

08005ff8 <floor>:
 8005ff8:	ec51 0b10 	vmov	r0, r1, d0
 8005ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006000:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006004:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006008:	2e13      	cmp	r6, #19
 800600a:	ee10 5a10 	vmov	r5, s0
 800600e:	ee10 8a10 	vmov	r8, s0
 8006012:	460c      	mov	r4, r1
 8006014:	dc32      	bgt.n	800607c <floor+0x84>
 8006016:	2e00      	cmp	r6, #0
 8006018:	da14      	bge.n	8006044 <floor+0x4c>
 800601a:	a333      	add	r3, pc, #204	; (adr r3, 80060e8 <floor+0xf0>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f8e0 	bl	80001e4 <__adddf3>
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	f7fa fd22 	bl	8000a70 <__aeabi_dcmpgt>
 800602c:	b138      	cbz	r0, 800603e <floor+0x46>
 800602e:	2c00      	cmp	r4, #0
 8006030:	da57      	bge.n	80060e2 <floor+0xea>
 8006032:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006036:	431d      	orrs	r5, r3
 8006038:	d001      	beq.n	800603e <floor+0x46>
 800603a:	4c2d      	ldr	r4, [pc, #180]	; (80060f0 <floor+0xf8>)
 800603c:	2500      	movs	r5, #0
 800603e:	4621      	mov	r1, r4
 8006040:	4628      	mov	r0, r5
 8006042:	e025      	b.n	8006090 <floor+0x98>
 8006044:	4f2b      	ldr	r7, [pc, #172]	; (80060f4 <floor+0xfc>)
 8006046:	4137      	asrs	r7, r6
 8006048:	ea01 0307 	and.w	r3, r1, r7
 800604c:	4303      	orrs	r3, r0
 800604e:	d01f      	beq.n	8006090 <floor+0x98>
 8006050:	a325      	add	r3, pc, #148	; (adr r3, 80060e8 <floor+0xf0>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa f8c5 	bl	80001e4 <__adddf3>
 800605a:	2200      	movs	r2, #0
 800605c:	2300      	movs	r3, #0
 800605e:	f7fa fd07 	bl	8000a70 <__aeabi_dcmpgt>
 8006062:	2800      	cmp	r0, #0
 8006064:	d0eb      	beq.n	800603e <floor+0x46>
 8006066:	2c00      	cmp	r4, #0
 8006068:	bfbe      	ittt	lt
 800606a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800606e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006072:	19a4      	addlt	r4, r4, r6
 8006074:	ea24 0407 	bic.w	r4, r4, r7
 8006078:	2500      	movs	r5, #0
 800607a:	e7e0      	b.n	800603e <floor+0x46>
 800607c:	2e33      	cmp	r6, #51	; 0x33
 800607e:	dd0b      	ble.n	8006098 <floor+0xa0>
 8006080:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006084:	d104      	bne.n	8006090 <floor+0x98>
 8006086:	ee10 2a10 	vmov	r2, s0
 800608a:	460b      	mov	r3, r1
 800608c:	f7fa f8aa 	bl	80001e4 <__adddf3>
 8006090:	ec41 0b10 	vmov	d0, r0, r1
 8006094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006098:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	fa23 f707 	lsr.w	r7, r3, r7
 80060a4:	4207      	tst	r7, r0
 80060a6:	d0f3      	beq.n	8006090 <floor+0x98>
 80060a8:	a30f      	add	r3, pc, #60	; (adr r3, 80060e8 <floor+0xf0>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa f899 	bl	80001e4 <__adddf3>
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 80060b6:	f7fa fcdb 	bl	8000a70 <__aeabi_dcmpgt>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0bf      	beq.n	800603e <floor+0x46>
 80060be:	2c00      	cmp	r4, #0
 80060c0:	da02      	bge.n	80060c8 <floor+0xd0>
 80060c2:	2e14      	cmp	r6, #20
 80060c4:	d103      	bne.n	80060ce <floor+0xd6>
 80060c6:	3401      	adds	r4, #1
 80060c8:	ea25 0507 	bic.w	r5, r5, r7
 80060cc:	e7b7      	b.n	800603e <floor+0x46>
 80060ce:	2301      	movs	r3, #1
 80060d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060d4:	fa03 f606 	lsl.w	r6, r3, r6
 80060d8:	4435      	add	r5, r6
 80060da:	4545      	cmp	r5, r8
 80060dc:	bf38      	it	cc
 80060de:	18e4      	addcc	r4, r4, r3
 80060e0:	e7f2      	b.n	80060c8 <floor+0xd0>
 80060e2:	2500      	movs	r5, #0
 80060e4:	462c      	mov	r4, r5
 80060e6:	e7aa      	b.n	800603e <floor+0x46>
 80060e8:	8800759c 	.word	0x8800759c
 80060ec:	7e37e43c 	.word	0x7e37e43c
 80060f0:	bff00000 	.word	0xbff00000
 80060f4:	000fffff 	.word	0x000fffff

080060f8 <scalbn>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	ec55 4b10 	vmov	r4, r5, d0
 80060fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006102:	4606      	mov	r6, r0
 8006104:	462b      	mov	r3, r5
 8006106:	b99a      	cbnz	r2, 8006130 <scalbn+0x38>
 8006108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800610c:	4323      	orrs	r3, r4
 800610e:	d036      	beq.n	800617e <scalbn+0x86>
 8006110:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <scalbn+0x100>)
 8006112:	4629      	mov	r1, r5
 8006114:	ee10 0a10 	vmov	r0, s0
 8006118:	2200      	movs	r2, #0
 800611a:	f7fa fa19 	bl	8000550 <__aeabi_dmul>
 800611e:	4b37      	ldr	r3, [pc, #220]	; (80061fc <scalbn+0x104>)
 8006120:	429e      	cmp	r6, r3
 8006122:	4604      	mov	r4, r0
 8006124:	460d      	mov	r5, r1
 8006126:	da10      	bge.n	800614a <scalbn+0x52>
 8006128:	a32b      	add	r3, pc, #172	; (adr r3, 80061d8 <scalbn+0xe0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	e03a      	b.n	80061a6 <scalbn+0xae>
 8006130:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006134:	428a      	cmp	r2, r1
 8006136:	d10c      	bne.n	8006152 <scalbn+0x5a>
 8006138:	ee10 2a10 	vmov	r2, s0
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa f850 	bl	80001e4 <__adddf3>
 8006144:	4604      	mov	r4, r0
 8006146:	460d      	mov	r5, r1
 8006148:	e019      	b.n	800617e <scalbn+0x86>
 800614a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800614e:	460b      	mov	r3, r1
 8006150:	3a36      	subs	r2, #54	; 0x36
 8006152:	4432      	add	r2, r6
 8006154:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006158:	428a      	cmp	r2, r1
 800615a:	dd08      	ble.n	800616e <scalbn+0x76>
 800615c:	2d00      	cmp	r5, #0
 800615e:	a120      	add	r1, pc, #128	; (adr r1, 80061e0 <scalbn+0xe8>)
 8006160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006164:	da1c      	bge.n	80061a0 <scalbn+0xa8>
 8006166:	a120      	add	r1, pc, #128	; (adr r1, 80061e8 <scalbn+0xf0>)
 8006168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616c:	e018      	b.n	80061a0 <scalbn+0xa8>
 800616e:	2a00      	cmp	r2, #0
 8006170:	dd08      	ble.n	8006184 <scalbn+0x8c>
 8006172:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800617a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800617e:	ec45 4b10 	vmov	d0, r4, r5
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006188:	da19      	bge.n	80061be <scalbn+0xc6>
 800618a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800618e:	429e      	cmp	r6, r3
 8006190:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006194:	dd0a      	ble.n	80061ac <scalbn+0xb4>
 8006196:	a112      	add	r1, pc, #72	; (adr r1, 80061e0 <scalbn+0xe8>)
 8006198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e2      	bne.n	8006166 <scalbn+0x6e>
 80061a0:	a30f      	add	r3, pc, #60	; (adr r3, 80061e0 <scalbn+0xe8>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa f9d3 	bl	8000550 <__aeabi_dmul>
 80061aa:	e7cb      	b.n	8006144 <scalbn+0x4c>
 80061ac:	a10a      	add	r1, pc, #40	; (adr r1, 80061d8 <scalbn+0xe0>)
 80061ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0b8      	beq.n	8006128 <scalbn+0x30>
 80061b6:	a10e      	add	r1, pc, #56	; (adr r1, 80061f0 <scalbn+0xf8>)
 80061b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061bc:	e7b4      	b.n	8006128 <scalbn+0x30>
 80061be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061c2:	3236      	adds	r2, #54	; 0x36
 80061c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80061cc:	4620      	mov	r0, r4
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <scalbn+0x108>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	e7e8      	b.n	80061a6 <scalbn+0xae>
 80061d4:	f3af 8000 	nop.w
 80061d8:	c2f8f359 	.word	0xc2f8f359
 80061dc:	01a56e1f 	.word	0x01a56e1f
 80061e0:	8800759c 	.word	0x8800759c
 80061e4:	7e37e43c 	.word	0x7e37e43c
 80061e8:	8800759c 	.word	0x8800759c
 80061ec:	fe37e43c 	.word	0xfe37e43c
 80061f0:	c2f8f359 	.word	0xc2f8f359
 80061f4:	81a56e1f 	.word	0x81a56e1f
 80061f8:	43500000 	.word	0x43500000
 80061fc:	ffff3cb0 	.word	0xffff3cb0
 8006200:	3c900000 	.word	0x3c900000

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
